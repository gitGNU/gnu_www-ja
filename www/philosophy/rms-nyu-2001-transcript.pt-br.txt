Transcrição do discurso de Richar M. Stallman, "Software Livre: Liberdade de
Cooperação" Universidade de Nova Iorque, em 29 de Maio de 2001.

Original em inglês: http://www.gnu.org/philosophy/rms-nyu-2001-transcript.txt

Traduzido por Edgard Lemos <edgard@edconsultoria.com.br>

Uma outra tradução pode ser encontrada em:
http://www.msantunes.com.br/palestra.htm


URETSKY: Eu sou Mike Uretsky. Sou da  "Escola de Negócios Stern". Também sou
um dos co-diretores do Centro de Tecnologia Avançada. E, em nome de todos nós
do Departamento de Ciência da Computação, quero dar-lhes as boas-vindas aqui. 
Quero fazer alguns comentários antes de dar a palavra a Ed, que vai lhes
apresentar o palestrante.

O papel da Universidade é fomentar o debate e levantar discussões
interessantes. E o papel de uma universidade proeminente é ter discussões
particularmente interessantes. E esta apresentação em particular, este
seminário entra bem dentro desse molde. Eu considero a discussão sobre código
aberto particularmente interessante. De certo modo, [Risos]

STALLMAN: Meu negócio é "software livre". Código aberto é outro movimento.
[Risos] [Aplausos]

URETSKY: Quando iniciei nesta área nos anos 60, software era basicamente
livre. Então entramos numa fase. Ele era livre, e então os fabricantes [[ou
"alguns dos fabricantes"]] de software, precisando expandir seus mercados, o
levaram para outras direções. Muito do desenvolvimento que aconteceu com a
entrada do PC foi exatamente nessa fase.

Há um filósofo francês muito interessante -- Pierre Levy -- que fala sobre
essas mudanças, e que fala sobre o movimento para o ciberespaço não só tendo a
ver com tecnologia, mas também com restruturação social e política, através da
mundança dos relacionamentos para a melhoraria do bem-estar da
humanidade. E esperamos que este debate seja um movimento nessa direção; pois
este debate atravessa várias disciplinas que são a base da Universidade.
Estamos desejosos de discussões verdadeiramente interessantes. Ed?

SCHONBERG: Eu sou Ed Schonberg do Departamento de Ciência da Computação do
Insituto Courant. Sejam todos bem-vindos a este evento. Apresentadores são
normalmente, e particularmente, um aspecto inútil em apresentações públicas,
mas, neste caso, realmente, um deles serviu a um propósito útil como
demonstrado por Mike. Um apresentador por exemplo, ao fazer
comentários imprecisos, pode permitir que ele endireite, corrija e [Risos]
esclareça consideravelmente os parâmetros do debate. 

Portanto, vou apresentar da maneira mais rápida possível alguém que dispensa
apresentações. Richard é o exemplo perfeito de alguém que, agindo localmente,
começou a pensar globalmente a partir de problemas relativos à não
disponibilidade de código fonte para drivers de impressora no AI-Lab muitos
anos atrás. Ele desenvolveu uma filosofia coerente que nos forçou a todos a
reexaminar nossas idéias de como se produz sofwtare, o que significa
propriedade intelectual e o que realmente representa a comunidade de software.
Convido, portanto, Richard Stallman. [Aplausos]


STALLMAN: Alguém pode me emprestar um relógio? [Risos] Obrigado. Bem, eu
gostaria de agradecer à Microsoft por me oferecer esta oportunidade de [Risos]
estar neste púlpito. Nas últimas semanas, eu me senti como um escritor cujo
livro tivesse sido fortuitamente proibido. [Risos] Exceto que todos os artigos
sobre ele davam o nome errado do autor, pois a Microsoft descreve GNU GPL como
uma licença de código aberto, e a maior parte da cobertura da imprensa adotou
isso. Muitas pessoas, obviamente inocentemente não percebem que nosso trabalho
não tem nada a ver com código aberto; de fato, fizemos quase tudo antes de
cunharem o termo "código aberto".

Somos do Movimento do Software Livre, e vou falar sobre o que é o movimento de
software livre, o que significa, o que temos feito e, como este evento é
parcialmente patrocinado pela Escola de Negócios, vou falar algumas coisas a
mais do que normalmente falo sobre como o software se relaciona com os negócios
e algumas outras áreas da vida social.

Bem, alguns de vocês talvez não escrevam programas, mas talvez cozinhem. E se
cozinham, a não ser que sejam muito bons, provavelmente seguem receitas. E se
seguem receitas, provavelmente já tiveram a experiência de obter uma cópia da
receita de um amigo. E provavelmente já tiveram a experiência -- a não ser que
sejam totalmente neófitos -- de alterar a receita. A receita diz certas coisas,
mas você não está obrigado a segui-la exatamente. Você pode excluir alguns
ingredientes. Adicionar cogumelos, porque você gosta. Pôr menos sal porque seu
médico disse para reduzir o sal -- etc. Você pode fazer alterações ainda
maiores de acordo com sua habilidade. E ao modificar uma receita, e cozinhar
para amigos e eles gostarem, um deles pode dizer "puxa, dá pra passar a
receita?" Então o que você faz? Você poderia escrever essa versão modificada da
receita e entregar uma cópia ao seu amigo. Isto é natural de se fazer com
receitas de qualquer tipo.

Ora, receitas têm muito em comum com programas. Programas têm muito em comum
com receitas. Uma série de passos de execução para obter algum resultado que
se queira. Assim, é natural agir da mesma forma com programas. Ceder uma cópia
a um amigo. Modificá-lo porque a tarefa para a qual foi escrito não é
exatamente o que você quer. Até fez uma excelente trabalho para outros, mas
você tem uma tarefa diferente. E, depois de modificá-lo, pode ser que seja útil
para outras pessoas ainda. Talvez elas tenham uma tarefa a fazer que seja como
a sua. Assim, elas pedem, posso conseguir uma cópia? E como você é
um cara legal, você vai dar a cópia. É assim que agem as pessoas decentes.

Agora imagine como seria se as receitas viessem lacradas dentro de caixas
pretas -- sem poder ver os ingredientes que estivesse usando, muito menos
modificá-los -- e imagine, se ao copiá-las para um amigo, eles o chamassem
de pirata e tentassem colocá-lo na cadeia por anos. Um mundo assim traria
tremenda indignação para todos aqueles acostumados a trocar receitas. Mas é
exatamente desse jeito que é o mundo do software proprietário. Um mundo no
qual a decência comum para com outras pessoas é proibida ou impedida.

E porque eu notei isso? Eu notei isso porque tive sorte, nos anos 70, de fazer
parte de uma comunidade de programadores que compartilhavam software. Essa
comunidade tinha sua origem essencialmente lá no início da computação. Nos
anos 70, porém, já estava ficando raro encontrar uma comunidade em que se
compartilhava software. E, de fato, era um caso extremo, pois no laboratório
em que trabalhava, o sistema operacional inteiro era software desenvolvido
pelas pessoas de nossa comunidade, e o compartilhávamos com qualquer
pessoa. Qualquer um era convidado a vê-lo e levar uma cópia, e fazer com ele o
que quisesse. Não havia nenhum aviso de direito de cópia nesses programas.
Cooperação era nosso modo de vida. E nos sentíamos seguros nesse tipo de vida.
Não lutávamos por ela. Não tínhamos que lutar por ela. Apenas vivíamos assim.
E, até onde eu soubesse, continuaríamos a ver daquela maneira. Assim, havia
software livre, mas não havia movimento de software livre.

Mas então, nossa comunidade foi destruída por uma série de calamidades que
aconteceram. No fim acabou sendo eliminada. No fim, o computador PDP-10	que
usávamos para todo nosso trabalho foi descontinuado. E como vocês sabem, nosso
sistema -- O Sistema de Compartilhamento de Tempo Incompatível -- fora
escrito nos anos 60, portanto fora escrito em assembler. Era assim que se
escrevia sistemas operacionais nos anos 60. Obviamente, programas em
assembler são feitos para uma arquitetura de hardware em particular; se for
descontinuado, todo o trabalho vira pó -- não serve para mais nada. E foi o
que aconteceu conosco. 20 anos ou tanto de trabalho da nossa comunidade virou
pó.

Mas antes que isso acontecesse, eu tive uma experiência que me preparou, me
ajudou a saber o que fazer, ajudou a me preparar para saber o que fazer quando
isso acontecesse, porque a certa época, a Xerox deu ao laboratório de
inteligência artificial em que trabalhava, uma impressora a laser, um presente
muito interessante, pois era a primeira vez que alguém fora da Xerox tinha uma
impressora a laser. Ela era muito rápida, imprimia uma página por segundo,
muito boa em muitos aspectos, mas não era confiável, porque ela era na verdade
uma copiadora de alta velocidade para escritórios modificada para impressora.
E vocês sabem, as copiadoras engasgam, mas o operador está junto para reparar.
A impressora engasgava sem ninguém ver. E ficava assim por longo tempo.

Então tivemos uma idéia para lidar com este problema. Modificá-la de modo
que quando engasgasse, a máquina que controlava a impressora pudesse avisar
nosso computador central, e avisar aos usuários que estivessem aguardando
as impressões, ou algo do tipo, por exemplo, de problemas na impressora. Se
soubessem que ela tinha engasgado, quer dizer, se você está esperando por
uma impressão, e sabe que a impressora está engasgada, você não vai ficar
sentado, você vai lá e resolve o problema da impressora.

Mas, aí ficamos completamente de mãos atadas, porque o software que controlava
a impressora não era livre -- ele tinha vindo com a impressora, e era apenas
um binário. Não tínhamos como saber o código fonte -- a Xerox não nos deixava
obter o código fonte. Assim, apesar de toda nossa habilidade como
programadores -- afinal, tínhamos escrito nosso próprio sistema operacional --
estávamos totalmente impedidos de adicionar o novo recurso ao software da
impressora.

Aí só nos restava sofrer com as demoras -- levava uma ou duas horas para
conseguir uma impressão porque a máquina engasgava a maior parte do tempo. E de
vez em quando -- a gente esperava uma hora sabendo que a impressora
iria engasgar mesmo e na hora de pegar a impressão via que a impressora não
tinha imprimido nada porque ninguém tinha ido lá desengasgá-la. Daí a gente a
punha em ordem e esperava mais meia hora. Ao voltar via que ela tinha
engasgado de novo -- antes de imprimir o seu trabalho. Imprimia três minutos e
engasgava trinta. Frustante à beça... Mas o pior era saber que nós podíamos
resolver o problema, mas alguém, por seu próprio egoísmo, nos impediu de
melhorar o software. Ficamos, então, um tanto ressentidos.

Um dia fiquei sabendo que uma pessoa da Universidade Carnegie Mellon tinha uma
cópia do software. Fiz uma visita lá um tempo depois e fui a seu escritório e
disse, "Olá, sou do MIT, posso copiar o código fonte da impressora?" Ao que
ele respondeu "Não, eu prometi não dá-lo a você". [Risos] Fiquei pasmado.
Fiquei -- fiquei tão nervoso, não tinha nem idéia de como revidar. Pensei em
virar as costas ali mesmo e sair da sala. Talvez batendo a porta. [Risos] Mais
tarde pensei sobre isso, pois percebi que não estava diante de um cretino
isolado, mas de um fenômeno social que era importante e afetava muita gente.

Isto -- para mim -- Tive sorte de apenas sentir o gosto, mas outras pessoas
tinham viver o tempo todo assim. Vejam, ele tinha prometido a se recusar a
cooperar conosco -- colegas seus do MIT. Ele tinha-nos traído. Mas não
só a nós. Acho até que ele traiu vocês. Com certeza, pensei agora, ele traiu
vocês. [Risos] E provavelmente ele os traiu também. Ele provavelmente traiu
todos deste auditório -- com exceção de uns poucos que não eram ainda nascidos
nos anos 80. Pois ele tinha prometido não cooperar com simplesmente toda a
população do Planeta Terra. Ele tinha assinado um acordo de confidencialidade.

Este foi, então, meu primeiro encontro direto com um acordo de
confidencialidade e com isso aprendi uma lição importante -- uma lição
importante que a maioria dos programadores nunca aprende. Vejam, este foi meu
primeiro encontro com um acordo de confidencialidade e eu fui a vítima. Eu, e
todo o meu laboratório, fomos as vítimas. E a lição que aprendi foi que
acordos de confidencialidade fazem vítimas. Eles não são inocentes. Eles não
são inofensivos. A maioria dos programadores se deparam com um acordo de
confidencialidade quando são convidados a assiná-lo. E há sempre aliciamento
-- a promessa de receber algo em troca se eles assinarem. Então inventam
desculpas. Daí dizem, "bem, o cliente nunca vai conseguir os fontes mesmo,
então porque não me unir ao cartel que o explora?" Ou dizem "sempre foi assim.
Quem sou eu para ir contra?" Ou também, "se eu não assinar isto, outro vai."
Várias desculpas para abafar sua consciência.

Mas, quando me convidaram para assinar um acordo de confidencialidade, minha
consciência já estava alerta. Lembrei-me de quanta raiva tinha sentido quando
alguém prometeu não dar ajuda a mim nem a meu laboratório inteiro para resolver
um problema. Eu não podia ceder e fazer exatamente a mesma coisa a outros que
nunca me tinham feito mal nenhum. Sabe, se alguém me pedisse para prometer não
dar informações úteis a um inimigo odiado, eu teria dito que não daria.
Entende? Se alguém me fez mal, talvez mereça. Mas, outros -- eles não tinham
me feito mal algum. Por que serem mal tratados? Não se pode tratar mal toda e
qualquer pessoa. Senão você se torna um predador da sociedade. Daí falei,
muito obrigado por me oferecer seu excelente programa. Mas não posso aceitá-lo
de consciência limpa, nas condições que você exige, vou ter de passar sem ele.
Muito obrigado. Assim, jamais assinei conscientemente um contrato de
confidencialidade para informações técnicas de utilidade geral, como software.

Mas há outras informações que levantam questões éticas diferentes. Por
exemplo, existem  informações pessoais. Se você conversar comigo sobre o que
aconteceu entre você e seu namorado, e me pedir para não contar a ninguém --
bem, eu posso guardar -- eu posso guardar esse segredo para você, porque não é
uma informação técnica de utilidade geral.

Pelo menos, não deveria ser de utilidade geral. [Risos] A não ser é claro --
e é só uma possibilidade, porém -- que você me revele alguma técnica sexual
tão fantástica, [Risos] que me faça sentir no dever moral [Risos] de
repassar isso para o resto da humanidade, para que todos possam se beneficiar. 
Assim, teria de colocar uma condição nessa promessa. Detalhes de
quem quer isso, quem está com raiva de quem, e outras coisas assim -- uma
novela -- mantenho segredo para você, mas algumas coisas de que a
humanidade pudesse se beneficiar tremendamente se soubesse, eu não iria
segurar. Vejam, o propósito da ciência e da tecnologia é desenvolver
informações úteis para que a humanidade ajude as pessoas a viverem melhor. Se
prometemos segurar essa informação -- se mantivermos segredo -- então
estaremos traindo a missão de nossa área. E assim, decidi que não devia
assinar. 

Mas, enquanto isso, minha comunidade tinha sumido, e isso era o fundo do
posso, daí fiquei numa situação ruim. Vejam, nosso sistema operacional estava
obsoleto, porque o PDP-10 estava obsoleto, e assim, não havia meio de
continuar trabalhando como desenvolvedor de sistema operacional do mesmo modo
como vinha fazendo. Isso dependia de fazer parte da comunidade que usava
software comunitário, e melhorá-lo. Isso não era mais uma possibilidade, e
isso me pôs num dilema moral. O que deveria fazer? Pois a possibilidade mais
óbvia significava ir contra a decisão que tinha tomado. A possibilidade mais
óbvia era me adaptar à mudança do mundo. Aceitar que as coisas tinham mudado,
abandonar meus princípios e passar a assinar acordos de confidencialidade 
para sistemas operacionais proprietários, e ainda muito provavelmente escrever
software proprietário também. Mas percebi que desse modo eu poderia me
divertir escrevendo programas, ganhar dinheiro -- especialmente se fizesse
carreira fora do MIT -- mas, no fim, olharia para trás sobre minha carreira e
diria "Gastei minha vida construindo muros para dividir as pessoas," e teria
vergonha de minha vida.

Então procurei outra alternativa, e havia uma que era óbvia. Até podia deixar
a área de software, e fazer outra coisa. Eu não tinha nenhuma outra
habilidade especial digna de nota, mas estou certo de que poderia me ter me
tornado garçon. [Risos] Não em restaurante chique, ele não me contratariam,
[Risos] mas talvez em outro lugar. E muitos programadores me dizem "as
pessoas que contratam programadores exigem isso, isso e isso -- se não fizer
do jeito deles, passo fome." É literalmente como dizem. Bem, garçon não
passar fome. [Risos] Eles não correm esse risco. Mas -- e isso é
importante, vejam vocês -- como às vezes se pode justificar o fazer algo que
prejudica outras pessoas dizendo "se não for desse jeito, algo pior vai
acontecer comigo". Se você está a ponto de passar fome, então está desculpado
se escrever software proprietário [Risos]. Se alguém estivesse apontando uma
arma para você, eu diria que é perdoável. [Risos] Mas, eu achei um modo de
sobreviver sem fazer nada anti-ético, para que não houvesse desculpa. Percebi
que ser garçon não me realizaria, e desperdiçaria minhas qualidades como
desenvolvedor de sistemas operacionais. Teria evitado o mal uso de minhas
habilidades. Desenvolver software proprietário seria mal uso de minhas
habilidades. Incentivar outras pessoas a viver num mundo de softawre
proprietário seria fazer mal uso de minhas habilidades. Então seria melhor
jogá-las fora que usá-las mal, mas ainda não estava bom.

Assim, por essas razões, decidi procurar outra alternativa. O que um
desenvolvedor de sistemas operacionais pode fazer para melhorar de fato a
situação, para fazer do mundo um lugar melhor? Percebi que um desenvolvedor de
sistemas operacionais era exatamente o que era necessário. O problema, o
dilema, existia para mim e para todos porque todos os sistemas operacionais
disponíveis para computadores modernos eram proprietários. Os sistemas
operacionais livres eram para computadores velhos e obsoletos, certo? Assim
para computadores modernos -- se você quisesse adquirir um computador moderno
e usá-lo, seria forçado a usar um sistema operacional proprietário. Se um
desenvolvedor escrevesse um novo sistema operacional -- e
depois dissesse, todo mundo vem aqui e copia, vocês estão convidados -- isso
seria uma saída para o dilema, uma outra alternativa. Assim percebi que
havia algo que podia fazer para resolver o problema. Eu tinha as habilidades
certas para fazê-lo. E foi a coisa mais útil que eu podia imaginar que seria
capaz de fazer na minha vida. Era um problema que ninguém mais estava tentando
resolver. Todo mundo via a coisa toda ficando pior e ninguém se mexia exceto
eu. Daí me senti um "escolhido". "Quem tem de resolver sou eu. Se não for, quem
vai?" Então decidi desenvolver um sistema operacional livre -- ou morrer
tentando. De velho, naturalmente. [Risos]

Naturalmente, eu tinha de decidir que tipo de sistema operacional deveria ser
-- havia algumas decisões técnicas de projeto a serem feitas. Decidi fazer um
sistema compatível com UNIX por uma série de razões. Primeiro, eu tinha visto
um sistema operacional de que eu realmente gostava ficar obsoleto porque ele
tinha sido escrito para um tipo específico de computador. Eu não queria que
isso acontecesse de novo. Precisávamos ter um sistema portável. Bem, UNIX era
um sistema portável. Então se seguisse as linhas de projeto do UNIX, teria uma
boa chance de fazer um sistema que fosse portável e operável. E além disso ser
compatível com ele nos detalhes. A razão é que os usuários odeiam mudanças
incompatíveis. Se tivesse projetado o sistema do jeito que mais gostasse -- o
que teria adorado fazer, com certeza -- teria produzido algo incompatível.
Bem, os detalhes seriam diferentes. Assim, se escrevesse o sistema -- os
usuários teriam-me dito "olha... é bem legal, mas incompatível. Vai dar
muito trabalho migrar. Não compensa usar seu sistema em vez do UNIX, assim
ficaremos com o UNIX", eles teriam dito.

Então, se quisesse criar de fato uma comunidade em que houvesse gente --
pessoas usando este sistema livre, e usufruindo dos benefícios da livre
cooperação -- eu teria de fazer um sistema que as pessoas usassem, um sistema
que eles achassem fácil de usar, que não apresentasse obstáculo, levando-o ao
insucesso logo no início. Ao fazê-lo compatível com UNIX, ficaram definidas
todas as decisões de projeto imediatas, porque o UNIX é composto de muitas
peças, e elas se comunicam por interfaces que são de alguma forma documentadas.
Se quiser ser compatível com UNIX, você precisa substituir cada peça, uma por
uma, por outra compatível. As decisões de projeto restantes ficam dentro
de cada peça. E poderiam ser escritas mais tarde por quem decidisse
escrevê-las; elas não precisavam ser feitas todas desde o início.

Assim, o que precisávamos fazer para começar o trabalho era encontrar um nome
para o sistema. Nós, hackers, sempre achamos um nome engraçado ou maroto para
os programas, já que pensar nas pessoas achando graça do nome é metade da
diversão de se escrever programas. [Risos] E tínhamos uma tradição de usar
siglas recursivas para dizer que o programa escrito era similar a outro
existente. Você pode criar uma sigla recursiva que diga -- este programa não
é o aquele. Assim, por exemplo, havia muitos editores de texto Tico nos anos 60
e 70, ele eram geralmente chamados de "isto não é o Tico". Um hacker chamou o
seu de Tint que quer dizer Tint Is Not Tico -- a primeira sigla recursiva. Em
1975, desenvolvi o primeiro editor de texto Emacs, e houve muitas imitações do
Emacs, e muitos deles eram chamados de isto não é Emacs, mas um era chamado
Fine -- Fine Is Not Emacs, e havia o Sine -- Sine Is Not Emacs e IINA, IIna Is
Not Emacs e MINCE, Mince Is Not Complete Emacs. [Risos] Era uma imitação
"light". E, então, IINA foi completamente reescrito, e a nova versão se chamou
ZWII. ZWII Was IINA Initially. [Risos]

Então procurei uma sigla recursiva para "Something Is Not UNIX". Tentei todas
as 26 letras e descobri que nenhuma delas formava uma palavra. [Risos] Hmm,
vamos tentar de outro jeito. Fiz uma contração. Assim, podia ter uma sigla com
três letras, Something's Not UNIX. E aí veio a palavra "GNU" -- a palavra
"GNU" é a mais engraçada da língua inglesa. [Risos] Foi isso mesmo.
Naturalmente, a razão de ser engraçada é dada pelo dicionário, sua pronúncia é
"new". Estão vendo? É por isso que as pessoas a usam para fazer vários
trocadilhos. Vou contar, este é o nome de um animal que vive na África. A
pronúncia africana tem um estalo. [Risos] Talvez ainda tenha. Os colonizadores
europeus, quando chegaram lá, não se incomodaram em aprender a pronunciar este
estalo. Assim o deixaram de fora, e escreveram o "G" para dizer "existe um som
aqui que deveria ser pronunciado". [Risos] Hoje à noite eu parto para a África
do Sul, e já pedi a eles. Espero que me encontrem alguém que possa me ensinar
a pronunciar esses estalos. [Risos] Assim vou saber como pronunciar GNU
corretamente, ao me referir ao animal.

Mas, ao se referir ao sistema operacional, a pronúncia correta é G-NU --
pronuncie um "G" mudo. Se você falar sobre um tal de sistema operacional
"new", as pessoas vão ficar confusas, já que trabalhamos nele há 17 anos,
então não é mais novo. [Risos] Mas ainda é, e sempre será GNU -- não importa
quantas pessoas o chamem erradamente de Linux. [Risos]

Assim, em janeiro de 1984, me demiti do MIT para começar a escrever as peças
do GNU. Eles foram muito legais em me deixar usar os equipamentos. E, naquela
época, pensei em escrever todas as peças, fazer um sistema GNU completo, para
depois dizer "venham e peguem" e aí as pessoas começariam a usá-lo. Mas não
foi o que aconteceu. As primeiras peças que escrevi eram boas substitutas, com
poucos bugs para alguns UNIX, mas não eram tremendamente atraentes. Ninguém
particularmente queria obtê-las nem instalá-las. Daí, em setembro de 1984,
comecei a escrever o GNU Emacs -- que foi minha segunda implementação do Emacs
-- no início de 1985, já estava funcionando. Podia usá-lo para tudo que
editasse, o que foi um grande alívio, porque não tinha nenhuma vontade de usar
o VI, o editor do UNIX. [Risos] Assim, até aquele momento, eu editava em
outros máquinas, gravava os arquivos pela rede, assim podia testá-los. Mas
quando o GNU Emacs estava rodando bem para que eu usasse, também estava --
outras pessoas queriam usá-lo também.

Assim tive de resolver detalhes de distribuição. Naturalmente, pus uma cópia
em um diretório de FTP anônimo, o que era bom para as pessoas conectadas na
rede; eles podiam puxar o arquivo tar, mas muitos programadores estavam fora
da Internet em 1985. Eles me mandavam emails dizendo "Como consigo uma cópia?"
Eu tinha de decidir o que responder para eles. Eu poderia ter dito, quero
gastar meu tempo escrevendo mais software GNU, não gravando fitas, assim por
favor ache um amigo conectado na Internet e que queira baixá-lo e ponha-o em
uma fita para você. E tenho certeza de que as pessoas teriam encontrado
amigos, mais cedo ou mais tarde, não é? Eles teriam conseguido as cópias. Mas
eu estava desempregado. De fato, estava desempregado desde que saíra do MIT em
janeiro de 1984. Estava procurando um meio de ganhar dinheiro pelo meu
trabalho no software livre, e assim iniciei um negócio de software livre. Eu
anunciava "me manda 150 dólares que eu lhe mando uma fita do Emacs". E os
pedidos começaram a pingar. Lá pelo meio do ano eles já estavam gotejando.

Eu recebia de 8 a 10 pedidos por mês. E, se necessário, poderia ter vivido só
com aquilo, porque sempre vivi uma vida modesta; eu vivo como um estudante,
basicamente. E gosto disso, porque isso significa que o dinheiro não dita o
que devo fazer. Eu posso fazer aquilo que julgo importante para mim. Isso me
libera para fazer o que parece valer a pena. Por isso, façam um esforço real
para evitar serem sugados para dentro de todos esses hábitos de vida
dispendiosos do americano típico. Pois se fizerem isso, as pessoas com
dinheiro vão ditar o que você deve fazer com sua vida. Você não vai conseguir
fazer o que é realmente importante para você.

Assim, ia tudo bem, mas as pessoas me perguntavam "Como você diz que seu
software é livre se custa 150 dólares?" [Risos] Bem, o motivo da pergunta era
que eles se confundiam com os múltiplos significados da palavra "free" do
inglês. Um dos significados se refere a preço, e o outro se refere a
liberdade. Quando falo software livre, estou me referindo a liberdade não a
a preço. Assim pensem em imprensa livre, não boca livre. [Risos] Ora, não
teria dedicado tantos anos de minha vida para fazer os programadores ganhar
menos. Não é meu objetivo. Eu sou programador e não me importo de receber
dinheiro. Eu só não vou dedicar minha vida a obtê-lo, mas não me importo em
receber. E não sou contra -- e portanto, a ética é mesma para todos -- não sou
contra outros programadores receber dinheiro. Não quero que os preços sejam
baixos. Não é essa absolutamente a questão. A questão é liberdade. Liberdade
para todos que usam software, quer a pessoa seja um programador ou não.

Pois agora vou dar a definição de software livre. É melhor descer aos
detalhes, entendem? Pois dizer "eu acredito na liberdade" é vago. Há tantos
tipos de liberdade em que posso acreditar, e elas são conflitantes entre si,
de modo que a questão realmente política é "Quais são as liberdades
importantes, as liberdades que devemos garantir que as pessoas tenham?" E
agora vou dar minha resposta a essa questão para a área específica do uso de
software.

Um programa é livre software livre para você, usuário, se você tem as
seguintes liberdades: primeiro, liberdade zero é a liberdade de rodar um
programa para qualquer propósito, do jeito que quiser. Liberdade um é a
liberdade ajudar a si próprio alterando o programa para atender suas
necessidades. Liberdade dois é a liberdade de ajudar os outros distribuindo
cópias do programa. E a liberdade três é a liberdade de ajudar a edificar sua
comunidade publicando versões melhoradas para que outros possam se beneficiar
de seu trabalho. Se você tem todas essas liberdades, o programa é livre, para
você -- isso é crucial, é por isso que uso essa forma de falar. Vou explicar
por que daqui a pouco, ao falar da Licença Pública Geral GNU, mas agora vou
explicar o que significa software livre, que é uma questão mais básica.

A liberdade zero é muito óbvia. Se a você não é permitido nem rodar o programa
do jeito que quiser, é um programa pra lá de restritivo. Mas normalmente, a
maioria dos programas lhe dão pelo menos a liberdade zero. A liberdade zero
segue, legalmente, como conseqüência da liberdade um, dois e três -- que é
como funciona a lei de direitos de cópia. Assim as liberdades que distinguem
software livre do software típico são as liberdades um, dois e três, por isso
vou falar mais sobre elas porque são mais importantes. A liberdade um é a
liberdade de resolver seus problemas através de modificações no sofware que
atendam suas necessidades. Isso pode significar consertar bugs. Pode significar
acrescentar novos recursos. Pode significar portá-lo para um computador
diferente. Pode significar traduzir todas as mensagens de erro para
uma língua indígena. Qualquer mudança que queira fazer, você deve ter
a liberdade para fazê-lo.

Agora, é obvio que programadores profissionais podem fazer uso dessa liberdade
com muita eficácia, mas não somente eles. Qualquer um com inteligência
razoável pode aprender a programar. Vocês sabem, há tarefas difíceis e tarefas
leves, mas muitas pessoas não vão aprender o bastante para fazer o trabalho
difícil. Mas muitas pessoas podem aprender o suficiente para fazer tarefas
leves, do mesmo modo, como há 50 anos atrás, muitos americanos sabiam reparar
carros, o que permitiu aos EUA ter um exército motorizado na Segunda Guerra e
vencer. Assim, é muito importante, ter muitas pessoas fuçando. E se você gosta
de trabalhar com pessoas, não vai querer aprender tecnologia de modo nenhum --
isso provavelmente significa que você tem muitos amigos, e é bom em fazê-los
lhe dever favores. [Risos] Alguns deles provavelmente são programadores. Assim
você pode pedir a um de seus amigos programadores "Você pode por favor alterar
isso para mim? Acrescentar esse recurso?" Assim, muitas pessoas podem ser
beneficiar.

Agora, se não houver essa liberdade, isso causa prejuízos práticos e materiais
para a sociedade. Isso faz de vocês prisioneiros de seu software. Eu expliquei
que como era no caso da impressora a laser. Ela trabalhava muito mal para nós e
não podíamos consertá-la porque éramos prisioneiros de nosso software. Mas
isso também afeta o ânimo das pessoas. Vocês sabem que se usar o computador
for uma frustração constante, para as pessoas usam, suas vidas se tornam
frustrantes, e se eles usam em seu trabalho, seu trabalho se torna frustrante
também; eles vão odiar o trabalho. E vocês sabem, as pessoas se protegem das
frustrações decidindo não estar nem aí. Daí você acaba com pessoas cuja
atitude é "Bem, apareci para trabalhar hoje. E é só o que tenho de
fazer. Não consigo fazer progressos, mas isso não é problema meu, é do
chefe." E quando isso acontece é ruim para essas pessoas, é ruim para a
sociedade como um todo. Esta é a liberdade um, a liberdade de resolver seus
problemas você mesmo.

A liberdade dois é a liberdade de ajudar os outros, ao distribuir cópias do
programa. Para seres que podem pensar e aprender, compartilhar conhecimento
útil é um ato fundamental de amizade. Quando esses seres usam computadores,
este ato de amizade toma forma de compartilhamento. Amigos compartilham uns
com os outros. E, de fato, este espírito de boa vontade -- o espírito de
ajudar seu próximo, voluntariamente -- é o recurso mais importante da
sociedade. Ele faz a diferença entre uma sociedade em que se pode conviver e um selva em
que um devora o outro. Sua importância tem sido reconhecida pelas religiões
mais importantes do mundo por milhares de anos, e elas procuram incentivar
explicitamente esta atitude.

Quando ia para o jardim-de-infância, os professores tentavam nos ensinar essa
atitude -- o espírito da partilha -- obrigando-nos a fazê-lo. Achavam que se o
fizéssemos, aprenderíamos. Eles diziam "Se você trouxer um chocolate para a
escola, não fique com ele, compartilhe com outras crianças". Ensinando-nos -- a
sociedade foi formada para ensinar o espírito de cooperação. E porque ensinar
desse modo? Porque as pessoas não são totalmente cooperativas. Não é parte da
natureza humana, e há outras partes da natureza humana. Assim, se quiser uma
sociedade melhor, você deve trabalhar para incentivar o espírito de
cooperação. Bem, nunca vai chagar a 100%. Mas isso é compreensível. As pessoas
também se preocupam consigo. Mas,quanto mais conseguirmos, melhor será para
todos.

Hoje em dia, de acordo com o Governo dos EUA, os professores devem fazer
exatamente o contrário. Joãozinho, você trouxe software para a escola. Olha,
não mostre pra ninguém. Não, não. Compartilhar é errado. Compartilhar
significa que você é pirata. O que eles querem dizer quando falam "pirata"?
Eles querem dizer que ajudar os outros é o equivalente moral de um ataque a um
navio. [Risos] O que Buda e Jesus diriam sobre isso? Escolham seu líder
religioso favorito. Eu não sei -- talvez Manson tivesse dito algo diferente
[Risos] Quem sabe o que L. Ron Hubbard diria. Mas, ...

PERGUNTA: [Inaudível]

STALLMAN: naturalmente, ele morreu. Mas eles não admitem. O que?

PERGUNTA: Os outros também, estão mortos.  [Risos] [Inaudível] Charles
Manson também morreu.  [Risos] Eles todos morreram, Jesus morreu, Buda
morreu...

STALLMAN: É, é verdade.  [Risos] Eu acredito, nesse aspecto, que L. Ron Hubbard
não é pior que os outros.  [Risos] Então -- [Inaudível]

PERGUNTA: L. Ron usava software livre -- ele ficou livre de Zanu.

[Risos]

STALLMAN: Então -- bem esta é de qualquer forma a razão mais importante de por
que software deve ser livre. Não podemos deixar que seja poluído o recurso
mais importante da sociedade. Com certeza não é um recurso físico como ar
puro e água potável. É um recurso psico-social, mas é tão real quanto, e faz
uma diferença tremenda em nossas vidas. Vejam, as ações que fazemos
influenciam os pensamentos das outras pessoas. Quando saímos por aí dizendo
para as pessoas "não compartilhe com os outros" -- se eles nos ouvirem --
teremos um efeito na sociedade que não será bom. Essa é a liberdade dois. A
liberdade de ajudar os outros.

E, a propósito, se você não tiver essa liberdade -- não só prejudica os
recursos psico-sociais da sociedade -- mas também provoca desperdício --
prejuízos práticos e materiais. Se o programa tem um dono, e o dono arranja um
estado de coisas em que cada usuário tem de pagar para poder usá-lo, alguns
vão dizer "Tudo bem, fico sem ele". E isso é perda, perda deliberadamente
infringida. E o interessante em software, naturalmente, é que menos
usuários não significa que você tem de produzir menos. Se poucas pessoas
compram carros, você pode fabricar menos carros. Aí você economiza. Há
recursos a serem alocados, ou não alocados, ao fabricar carros. Assim você
pode dizer que pôr preço num carro é bom. Ele impede que as pessoas
desperdicem recursos para fabricar carros que não serão realmente necessários.
Mas, se produzir cada carro adicional, não empregar mais recursos,
restringir a fabricação de carros não fará nenhum bem. Bem, para objetos
físicos, obviamente, como carros, sempre vai se usar recursos para fabricar
cada um deles. Cada exemplar adicional.

Mas para software isso não vale. Qualquer um pode fazer mais um cópia. E é
quase trivial fazê-lo. Isso não gasta recursos, com exceção de muito pouca
energia elétrica. Assim não há nada para que se possa economizar; nenhum
recurso que precisemos alocar melhor que justifique colocar um desincentivo
financeiro no uso do software. Você sempre encontra pessoas pegando -- as
conseqüências dos princípios econômicos, baseados nas premissas que não se
aplicam a software e tentando transplantar de outras área da vida em que essas
premissas podem se aplicar e que as conclusões podem ser válidas. Eles só pegam
as conclusões e assumem que sejam válidas para software também -- quando o
argumento é baseado em nada no caso do software. As premissas não funcionam
nesse caso. É muito importante examinar como você chega a essa conclusão, e
de que premissas ela depende, para ver onde ela possa ser válida. Assim,
essas é a liberdade dois, a liberdade de ajudar os outros.

A liberdade três é a liberdade de contribuir para sua comunidade ao publicar
uma versão melhor do software. As pessoas costumam me dizer, se o
software for livre, ninguém receberá para trabalhar nele, porque alguém iria
querer trabalhar com ele? Bem, naturalmente, elas estão confundindo os dois
significados de livre, assim seu raciocínio é baseado num mal-entendido. Mas,
de qualquer modo, essa é a teoria delas. Hoje, podemos comparar a teoria
delas com fatos empíricos, e descobrir que centenas de pessoas são pagas para
escrever software livre e mais de 100.000 estão trabalhando como voluntários.
Temos muitas pessoas trabalhando com software livre por vários motivos
diferentes.

Quando lancei o GNU Emacs -- a primeira peça do sistema GNU que as pessoas
realmente queriam usar -- e quando comecei a ter usuários, depois de um tempo,
alguém mandou uma mensagem dizendo "Acho que vi um bug no código fonte, e aqui
está o conserto". E recebi outra mensagem "Isto é código para adicionar um
novo recurso". E mais outro reparo de bug. E mais um novo recurso. E mais
outro, e outro e outro -- até que estavam vindo tão rápido que fazer uso de
todo esse apoio que estava recebendo se tornou uma grande tarefa. A Microsoft
não tem esse problema. [Risos]

Por fim, as pessoas notaram este fenômeno. Vejam, nos anos 80, muitos de nós
pensavam que software livre talvez não viesse a ser tão bom quando
software proprietário, porque não teríamos muito dinheiro para pagar às
pessoas. E, naturalmente, pessoas como eu que valorizam a liberdade e a
comunidade disseram "É, vamos conseguir usar software livre afinal". Vale a
pena fazer um pouco de sacrifício em algumas meras comodidades técnicas para
ter liberdade. Mas o que as pessoas começaram a notar, por volta dos anos 90
era que nosso software era mesmo melhor. Era mais poderoso, e mais confiável
que as alternativas proprietárias.

No começo dos anos 90, alguém descobriu um meio de fazer uma medida científica
da confiabilidade do software.  Ele fez o seguinte. Ele pegou vários grupos
de programas comparáveis que faziam as mesmas tarefas -- exatamente as mesmas
tarefas -- em sistemas diferentes. Pois havia certos utilitários básicos
à là UNIX. E as tarefas que realizavam, sabemos, eram todas, mais ou
menos, imitando a mesma coisa, ou seguiam as especificações POSIX, assim elas
eram todas iguais em termos das tarefas que cumpriam -- mas eram mantidas por
pessoas diferentes, escritas separadamente. O código era diferente. Assim ele
dizia, OK, vamos pegar esses programas e rodar com dados aleatórios, e
medimos quão freqüentemente eles travam ou dão pau. Assim eles mediram e o
conjunto de programas mais confiável foi os programas GNU. Todas as
alternativas comerciais  proprietários eram menos confiáveis. Então
publicamos isso e contamos a todos os desenvolvedores, e alguns anos mais
tarde, ele fez a mesma experiência com versões mais novas e conseguiu o mesmo
resultado. As versões GNU eram mais confiáveis. Gente -- vocês sabem que há
clínicas de tratamento de câncer nas operações 911 [NT.: operações de resgate e
polícia] que usam sistema GNU, porque são muito confiáveis, e confiabilidade é
muito importante para eles.

De qualquer modo, há ainda um grupo de pessoas que focam nesse benefício
particular como como justificativa -- como justificativa -- dada para por que
ao usuário deveria ser permitido fazer todas essas coisas, e ter toda essa
liberdade. Se vocês estão me acompanhado, notaram que-- vocês viram que eu --
falando do movimento de software livre -- falo de questões éticas, e em que
tipo de sociedade queremos viver; o que contribui para uma boa sociedade --
bem como benefícios materiais práticos. Eles são ambos importantes. Isso é o
movimento do software livre.

O outro grupo de pessoas -- chamados de movimento de "código aberto" -- eles
só citam os benefícios práticos. Eles negam que isso seja uma questão de
princípios. Eles negam que as pessoas têm direito à liberdade de compartilhar
com os outros, de verem o que o programa faz e alterá-lo se não gostar dele.
Eles dizem, no entanto, que é útil permitir que as pessoas façam isso. Eles
vão às empresas e dizem "Olha, você poderia ganhar mais dinheiro se deixasse
as pessoas fazerem isso". Assim, o que você vê é que até certo ponto, eles
levam as pessoas a uma direção similar, mas por razões totalmente --
razões filosóficas fundamentalmente diferentes. Pois na questão mais profunda
de todas, nas questões éticas, os dois movimentos discordam entre si. No
movimento de software livre dizemos "Você tem direito a estas liberdades. As
pessoas não deveriam impedi-lo de fazer estas coisas". No movimento de
"código aberto" eles dizem "Eles pode podem impedi-lo sim, mas
tentaremos convencê-los a deixar você fazer essas coisas". Bem, eles
contribuíram -- eles convenceram um certo número de empresas a lançar software
substancial como software livre em nossa comunidade. E trabalhamos juntos em
projetos práticos. Mas, filosoficamente, há um desacordo tremendo.

Infelizmente, o movimento de código aberto é um dos que mais tem suporte das
empresas, e assim a maioria dos artigos sobre nosso trabalho o descrevem como
código aberto, e muitas pessoas inocentemente pensam que somos todos parte do
movimento de código aberto. É por isso que estou mencionando esta distinção.
Quero que vocês estejam cientes de que o movimento do software livre, que
trouxe nossa comunidade à existência e desenvolveu sistemas operacionais
livres, ainda está aqui -- e que ainda pregamos esta filosofia ética. Quero que
vocês saibam disso, de modo que não confundam as pessoas sem saber.

Mas também, para que vocês possam pensar sobre a posição vão tomar. O que
prega o movimento que vocês apóiam. Vocês podem concordar com os
movimentos de software livre e meus pontos de vista. Vocês podem concordar com
o movimento de código aberto. Você pode discordar de ambos. Vocês decidem em
que posição ficar quanto a estas questões políticas. Mas se concordarem com o
movimento de software livre -- se virem que há alguma idéia aqui tal que as
pessoas cujas vidas são controladas e dirigidas por esta decisão mereçam ser
ouvidas -- então espero que digam que vocês concordam com o movimento de
software livre e uma forma como vocês podem fazer isso é usando o termo
software livre e assim ajudar as pessoas a saberem que existimos. 

Assim, a liberdade três é muito importante tanto prática quanto
psico-socialmente. Se você não tem esta liberdade, isso vai causar danos
práticos e materiais, porque o desenvolvimento dessa comunidade não vai
acontecer e não teremos software poderoso e confiável. Mas também provoca
danos psico-sociais que afetam o espírito da cooperação científica -- a idéia
de que estamos trabalhando juntos para avançar o conhecimento humano. Como
vêem, o progresso da ciência depende crucialmente  de pessoas que sejam
capazes de trabalhar em conjunto. E hoje em dia porém, você sempre acha um
pequeno grupo de cientistas agindo como se estivessem em guerra com outra
gangue de cientistas e engenheiros. E se não trocarem informações, eles todos
perderão.

Assim, estas são as três liberdades que distinguem software livre do software
típico. A liberdade um é a liberdade de resolver seus problemas você mesmo --
fazendo mudanças para atender suas próprias necessidades. A liberdade dois é a
liberdade de ajudar os outros distribuindo cópias. E a liberdade três é a
liberdade de ajudar a construir uma comunidade ao fazer mudanças e publicá-las
para que as outras pessoas a usem. Se você tem todos estas liberdades, o
programa é software livre para você. Agora, porque defino dessa forma em termos
de um usuário particular? O software é livre para você, o software é livre
para você, o software é livre para você? Sim?

PERGUNTA: Você pode explicar um pouco a diferença entre a liberdade dois e a
liberdade três?  [inaudível]

STALLMAN: Bem, elas certamente se relacionam, pois se você não tem liberdade
nenhuma para redistribuir, você certamente não tem liberdade para distribuir
uma versão modificada, mas elas são atividades diferentes.
 
QUESTION: Ah.

STALLMAN: A liberdade dois é, como vocês sabem, ler -- você faz uma cópia
exata e passar para seus amigos, para que eles possam usá-lo. Ou talvez você
faça cópias exatas e as venda para um monte de gente para que possam usar. A
liberdade três é quando você faz aperfeiçoamentos -- ou pelos menos você acha
que são aperfeiçoamentos, e algumas outras pessoas podem achar que são também.
Assim essa é a diferença. Ah, e a propósito, um ponto crucial. As liberdades
um e três dependem de você ter acesso ao código-fonte. Pois modificar uma
programa binário é extremamente difícil [Risos] Mesmo mudanças triviais como
usar quatro dígitos para a data. [Risos]... se você não tem os fontes. Assim,
por razões imperativas e práticas o acesso ao código-fonte é uma pré-condição,
um requisito do software livre.

Então, por que eu defini em termos de software livre ou não para *você*? A
razão é que algumas vezes o mesmo programa pode ser software livre para alguns
e pode não ser para outros. Ora, isso pode parecer uma situação paradoxal,
deixe-me dar um exemplo para mostrar como isso acontece. Um grande exemplo 
-- talvez o maior problema de todos seja o do sistema de janelas X que foi
desenvolvido no MIT e lançado sob uma licença que fazia dele software livre.
Se você conseguisse a versão do MIT com a licença do MIT, você tinha
liberdades um, dois e três. Era software livre para você. Mas entre os que
obtiveram cópias, estavam vários fabricantes de computador que distribuíam
sistemas UNIX e eles fizeram todas as mudanças necessárias no X para rodar em
seus sistemas. Você sabe, provavelmente alguns milhares de linhas dentro de
centenas de milhares de linhas do X. E, ao compilarem, eles puseram os
binários no sistema UNIX deles e distribuíram sob o mesmo acordo de
confidencialidade do resto do sistema UNIX. E então, milhões de pessoas
obtiveram essas cópias. Eles tinham o sistema de janelas X, mas não tinham
essas liberdades. Não era software livre para eles.

Assim, o paradoxo era que o X era software livre dependendo de onde você feito
a observação. Se observassem num grupo de desenvolvedores, vocês diriam "Eu
observo todas as três liberdades aqui. O software é livre." Se fizessem
suas observações entre os usuários vocês diriam "Hmm, muitos usuários não têm
estas liberdades. Não é software livre". Bem, as pessoas que desenvolviam X não
consideravam isso um problema, pois seu objetivo era popularidade -- ego,
essencialmente. Eles queriam um grande sucesso profissional. Eles queriam
sentir "ah, muitas pessoas estão usando nosso software". E foi assim que
aconteceu. Muitas pessoas estavam usando o software deles, mas não tinham
liberdade.

Bem, no projeto GNU, se a mesma coisa tivesse acontecido como o software GNU,
ele teria sido um fracasso, pois nosso objetivo não era sermos populares;
nosso objetivo era dar liberdade às pessoas e incentivar a cooperação, permitir
que as pessoas cooperassem. Lembre-se, nunca force ninguém a cooperar com
qualquer outra pessoa, mas garanta que a todos seja permitido cooperar; todo
mundo tem a liberedade de agir assim ou não, se quiser. Se milhões de pessoas
estivessem rodando versões não livres do GNU, não teria sido um sucesso de
jeito nenhum; e a coisa toda teria se desviado de seus objetivos.

Então procurei uma maneira de impedir que isso acontecesse. O método que criei
é chamado de "copyleft" [N.T.: uma possível brincadeira com esse nome em
português seria "esquerdo de cópia"]. É chamado copyleft porque é como
copyright [N.T.: direito de cópia] só que virado de cabeça para baixo. [Risos]
Legalmente, copyleft é baseado no direito de cópia. Usamos a lei existente de
direito de cópia, mas a usamos para atingir um objetivo muito diferente. Isso
é que fazemos. Dizemos "Este programa tem direitos de cópia". E, naturalmente,
por default, significa que é proibido copiá-lo, ou distribuí-lo ou
modificá-lo. Mas então dizemos, "Você está autorizado a distribuir cópias
dele. Você está autorizado a modificá-lo. Você está autorizado a distribuir
versões modificadas e estendidas. Mude do modo que quiser."

Mas há uma condição. E a condição, naturalmente -- é a razão pela qual nos
demos a todo esse trabalho -- para que pudéssemos colocar essa condição. A
condição diz -- sempre que distribuir algo que contenha qualquer parte dese
programa, o programa todo deve ser distribuído sob estes mesmos termos -- não
mais não menos. Assim, você pode mudar o programa e distribuir a versão
modificada. Mas se o fizer, as pessoas que o obtiverem de você devem ter a
mesma liberdade que você recebeu de nós. E não só para partes dele -- as parte
que você copiou do nosso programa -- mas também para as outras partes daquele
programa que eles obtiveram de você. O programa como um todo deve ser software
livre para eles.

As liberdades de modificar e redistribuir este programa se tornam direitos
inalienáveis -- um conceito de nossa Declaração de Independência. Direitos que
damos garantia de não ser tirados de você. E, naturalmente, a licença
específica que incorpora a idéia do copyleft é a Licença Geral Pública GNU
[GNU General Public License, ou GNU GPL]. Uma licença controversa -- porque
na realidade tem força para dizer não às pessoas que pudessem virar parasitas
em nossa comunidade.

Há muitas pessoas que não apreciam os ideais da liberdade. E adorariam tomar o
trabalho que fizemos e usá-lo para conseguir uma vantagem ao distribuir
programas proprietários e tentando as pessoas a desistir de sua liberdade. E o
resultado seria -- vocês sabem, se deixarmos as pessoas fazerem isso --
estaríamos desenvolvendo esses programas livres, e teríamos de competir
constantemente com versões modificadas de nossos próprios programas. Isso
não é bom. E muita gente também pensa -- eu quero dar meu tempo
voluntariamente para contribuir com a comunidade, mas por que deveria
contribuir voluntariamente para aquela empresa -- para melhorar o programa
proprietário daquela empresa? Você sabe, algumas pessoas podem nem mesmo achar
que isso seja ruim - mas elas querem ser pagas se for para fazer isso. Eu,
pessoalmente, não o faria, mesmo. Mas, estes dois grupos de pessoas -- ambos
como eu que diriam -- não quero ajudar aquele programa não livre a fincar o pé
em nossa comunidade -- e os que dizem, claro, eu trabalharia para eles, mas
então me pagem -- ambos têm uma boa razão para usar GNU GPL. Porque isso diz à
empresa -- você não pode tomar assim meu trabalho e distribuí-lo sem a
liberdade. Ao passo que licenças não copyleft -- com a licença do X Window,
permitem isso.

Isto, portanto é a grande diferença entre as duas categorias de
software livre -- do ponto de vista das licenças. Há programas com copyleft
-- de modo que a licença defenda a liberdade do software para todos os
usuários. E há programas sem copyleft, para os quais se permite versões não
livres. Você pode obter o programa numa versão não livre. E este problema
existe até hoje. Ainda há versões não livres do X Windows sendo usadas em
nossos sistemas operacionais não livres.  Há inclusive hardware -- que não é
suportado -- exceto por uma versão não livre do X Windows. E isso é um grande
problema em nossa comunidade. Por outro lado, eu não diria que o X Windows é
algo ruim -- sabe, eu só diria que os desenvolvedores não fizeram o que
de melhor poderia ter sido feito. Mas eles *de fato* lançaram muito software
que todos nós poderíamos usar.

Vocês sabem, há uma grande diferença entre menos que perfeito, e ruim. Há
muitos graus entre bom e ruim. Temos de resistir à tentação de dizer -- se você
não conseguir fazer o melhor absoluto possível você não é bom. As pessoas que
desenvolveram o X Windows deram uma grande contribuição a nossa comunidade.
Mas, há algo melhor que poderiam ter feito. Eles poderiam ter feito copylefts
de partes do programa e impedido versões que negam a liberdade de serem
distribuídas por outros. Ora, o fato de que a GNU GPL defende sua liberdade --
usa a lei de copyright para defender sua liberdade -- é, naturalmente, a razão
pela qual a Microsoft a está atacando hoje. Vejam, a Microsoft realmente
adoraria poder pegar todos os códigos que escrevemos e pô-los em programas
proprietários. Pedir para que alguém fizesse alguns aperfeiçoamentos. Ou talvez
só algumas mudanças incompatíveis é tudo o que precisassem. [Risos]

Mas, com a influência de marketing da Microsoft, eles não precisam
aperfeiçoá-lo para ter uma versão que suplante a nossa. Eles só têm de fazê-la
diferente e incompatível. E então, colocá-la no desktop de todo o mundo. Assim,
eles não gostam mesmo da GNU GPL. Pois a GNU GPL não os deixa fazê-lo.  Não
permite adotar e estender [N.T.: embrace and extend]. Ela [a GPL] diz [à
Microsoft], se você quiser usar nosso código em seus programas, você pode. Mas,
você vai ter de compartilhar e compartilhar da mesma forma. As mudanças que
fizer teremos permissão de usar. Assim, é uma cooperação de mão dupla, que é a
cooperação real.

Muitas empresas -- mesmo grandes empresas como IBM e HP querem usar nosso
software nesta base [GPL].A IBM e a HP contribuem com aperfeiçoamentos
substanciais ao software GNU. E desenvolvem outros software livres. Mas a
Microsoft não quer fazer isso, assim eles passam a idéia de que as empresas
não podem lidar com a GPL. Bem, se [o que chamamos de] empresas não incluir
IBM, HP e Sun então talvez eles estejam certos. [Risos]

Mais sobre isso adiante. Eu preciso terminar a história. Como vêem, começamos
em 1984 -- não só para escrever software livre -- mas também para fazer algo
muito mais coerente: desenvolver um sistema operacional que fosse inteiramente
software livre. Assim, isso significava que tínhamos que escrever parte por
parte. E naturalmente, estávamos a procura de meios mais rápidos. O trabalho
era tão grande que as pessoas diziam que não conseguiríamos terminar nunca. E,
eu achava que havia pelo menos uma chance de terminá-lo, mas obviamente, valia
a pena queimar etapas. Assim ficamos procurando -- há algum programa que alguém
escreveu que poderíamos conseguir adaptar, para acoplar aqui de modo que não
precisássemos escrever do zero? Por exemplo, o sistema X Window --  é verdade
que não tinha copyleft, mas era software livre -- assim podíamos usar.

Bem, eu queria colocar um sistema de janelas no GNU desde o primeiro dia. Eu
escrevi uma série de sistemas de janelas no MIT antes de começar o GNU. E
apesar do Unix não ter um sistema de janelas em 1984, eu decidi que o
GNU deveria ter. Mas, acabamos não escrevendo o Sistema de Janelas GNU, porque
o X apareceu. Daí eu disse, beleza! Um grande trabalho que não temos de fazer.
Usaremos o X. Então falei, vamos pegar X e colocá-lo no sistema GNU. Então
faremos as outras partes do GNU, você sabe, trabalhar com o X, quando
apropriado. E o encontramos outros programas que tinham sido escritos por
outras pessoas, tal como o formatador de texto TeX. Alguns códigos de
bibliotecas da Berkeley. E naquela época tinha o Berkeley Unix -- mas não era
software livre. O código de biblioteca, inicialmente, era de um grupo
diferente na Berkeley, que fazia pesquisas sobre ponto flutuante. E assim
continuamos -- encaixamos estas peças.

Em outrubro de 1985, fundamos a Fundação do Software Livre [N.T.: Free Software
Foundation, ou FSF]. Notem que o projeto GNU veio primeiro. A Fundação do
Software Livre veio depois. Depois de quase dois anos do anúncio do projeto. E
a Fundação de Software Livre é uma entidade isenta de impostos, sem fins
lucrativos, que levanta fundos para promover a liberdade de compartilhar e
modificar software. E nos anos 80, uma das coisa principais que fizemos com
nosso fundo foi contratar pessoas para escrever partes do GNU. E, programas
essenciais, tais como o Shell e as bibliotecas C foram escritos dessa forma,
bem como outras parte de outros programas. O programa tar, que é absolutamente
essencial -- apesar de nenhum pouco empolgante [Risos] foi escrito dessa
forma. Eu acredito que o GNU grep foi escrito dessa forma. E assim, fomos
chegando perto do objetivo.

Em 1991, havia apenas uma parte importante faltando, e era o kernel. Ora,
por que tinha deixado o kernel de fora? Provavelmente porque na verdade não
importa a ordem em que você faz as coisas. Pelo menos, tecnicamente, não.
Você tem que fazê-las todas até chegar ao fim de qualquer jeito. E,
parcialmente, porque eu esperava encontrar um kernel já começado em algum
lugar. E encontramos. Encontramos o Mach, que tinha sido desenvolvido na
Carnegie Mellon. Não era um kernel completo, era a metade de baixo do kernel.
Assim, tivemos que escrever a metade de cima, mas tinha de imaginar coisas
como o sistema de arquivos, o código da rede, etc. Mas o Mach roda
essencialmente como fazem os programas dos usuários, o que devia fazê-los mais
fácil de debugar. Você pode debugar com um debugador no nível do código real
ao mesmo tempo. E assim, pensava eu, desse modo, poderemos ter isto, as partes
mais altas do kernel, terminadas em pouco tempo. Não funcionou dessa maneira.
Aqueles processos assíncronos e multifilamentados [multithreaded], enviando
mensagens uns aos outros, acabaram-se tornando muito difíceis de debugar. E o
sistema baseado no Mach que usamos para alavancar o desenvolvimento tinha um
ambiente de debug terrível, não funcionava direito, e vários problemas. Levou
anos e anos para conseguir que um kernel GNU funcionasse.

Mas, felizmente, nossa comunidade não precisou esperar pelo kernel GNU. Pois
em 1991, Linus Torvalds desenvolveu um kernel livre chamado Linux. E ele usou
a antiga tecnologia monolítico e aconteceu que ele conseguiu fazê-lo funcionar
muito mais rápido que o nosso. Assim talvez esse tenha sido um dos erros que
cometi: aquela decisão de projeto. De qualquer forma, a princípio, não
sabíamos sobre Linux, pois ele nunca nos contatou para falar sobre ele. Apesar
de saber do projeto GNU. Mas ele o anunciou para outras pessoas e para outras
partes da Internet. E assim, outras pessoas então, fizeram o trabalho de
combinar Linux com o resto do sistema GNU fazendo um sistema operacional livre
completo. Essencialmente, fazendo uma combinação GNU mais Linux.

Mas não percebiam que era isso que estavam fazendo. Veja, eles disseram, temos
um kernel -- vamos dar uma olhada e ver que outras partes podemos juntar ao
kernel. Assim, procuraram -- e eis que, de repente -- tudo o que precisavam já
estava disponível. Que sorte, eles disseram. [Risos] Está tudo aí. Podemos
achar tudo o que precisamos. Vamos pegar todas essas partes diferentes e
juntá-las e compor um sistema. Eles não sabiam que a maioria das cosias que
achavam eram partes do sistema GNU. Eles não pensavam que estavam encaixando o
Linux num espaço vazio do sistema GNU. Eles achavam que estavam construindo um
sistema em cima do Linux. E daí chamaram o sistema de Linux.

PERGUNTA: [Inaudível]

STALLMAN: Não ouvi -- o quê?

PERGUNTA: [Inaudível]

STALLMAN: Bem, não é só -- você sabe, é provincial.

PERGUNTA: Mas foi sorte maior que achar o X e o Mach?

STALLMAN: Certo. A diferença é que as pessoas que desenvolveram o X e o Mach
não tinham por objetivo fazer um sistema operacional livre completo. Éramos os
únicos com essa idéia. E, foi nosso trabalho tremendo que fez o sistema
existir. Fizemos a maior parte do sistema que qualquer outro projeto. Não é
coincidência que essas pessoas -- elas escreveram partes úteis do sistema. Mas
não fizeram isso porque queriam ver o sistema terminado. Elas tinham outras
razões.

Por exemplo, as pessoas que desenvolveram o X -- achavam que projetar um
sistema de janelas com suporte a rede seria um bom projeto, e foi. E acabou
nos ajudando a fazer um sistema operacional bom e livre. Mas isso não era o
que esperavam. Eles nem pensavam nisso. Foi acidental. Um benefício acidental.
Agora, eu não estou dizendo que o que eles fizeram foi ruim. Eles fizeram um
grande projeto livre. Uma coisa boa de se fazer. Mas não tinham uma visão além
disso. O Projeto GNU é onde estava essa visão.

E assim, éramos os únicos cuja -- cada partezinha não era feita por ninguém,
nós sim. Porque sabíamos que não teríamos um sistema completo sem isso. E
até mesmo quando era totalmente entediante e pouco romântico como o tar ou o
mv. [Risos]. Fazíamos. Ou ld, vocês sabem, não há nada muito empolgande no ld
-- mas eu o escrevi. [Risos] E envidei esforços para que ele usasse uma
quantidade mínima de I/O [N.T.: tráfego] no disco para que fosse rápido e
desse conta de programas maiores. Mas, eu gosto fazer um bom trabalho. Eu
gosto de aperfeiçoar várias coisas nos programas enquanto os escrevo. Mas a
razão pela qual o fiz, não foi porque eu tinha idéias brilhantes para um ld
melhor.  A razão pela qual o fiz é que precisávamos de um que fosse livre. E
não podíamos esperar que outros o fizessem. Então, tivemos de fazê-lo, ou
encontrar alguém que fizesse.

Assim, apesar de nesse ponto, milhares de pessoas em projetos terem
contribuído para esse sistema [GNU/Linux], havia um projeto que era a razão
pela qual o sistema existia, e era o Projeto GNU. *É* basicamente o Sistema
GNU, com outras coisas acrescentadas desde então.

Assim, no entanto, a prática de chamar o sistema de Linux tem sido um grande
golpe no Projeto GNU, porque nós normalmente não recebemos crédito pelo que
temos feito. E penso que Linux, o kernel, é uma parte muito útil do software
livre, e tenho só coisas boas a dizer sobre ele. Mas , bem, na realidade,
podemos achar algumas coisas ruins para falar dele. [Risos] Mas, basicamente,
temos duas coisas a dizer sobre ele. No entanto, a prática de chamar o sistema
GNU de Linux é apenas um engano. Eu pediria que vocês por favor fizessem um
pequeno esforço necessário para chamá-lo de sistema GNU/Linux, e desse modo,
ajudar-nos a dividir o crédito.


PERGUNTA: Você precisa de um mascote! Arrume um bicho de pelúcia!

[Risos]

STALLMAN: Nós temos.
 
QUESTION: Ah, têm?

STALLMAN: Temos um bicho -- um gnu.  [Risos] Mas então. Bem,
sim, quando desenhar um pingüim --desenhe um gnu perto dele. [Risos]

Mas, vamos deixar as perguntas para o final. Eu tenho mais para discorrer. Por
que estou tão preocupado com isso? Sabe, acho que isso incomoda
vocês, e talvez talvez esteja dando a vocês uma -- talvez inferiorizando sua
opinião sobre mim [Risos] ao levantar essa questão sobre créditos? Porque,
vocês sabem, algumas pessoas, quando faço isso, algumas pessoas acham que é
porque eu quero que meu ego seja alimentado, certo? Naturalmente, eu não estou
dizendo -- chamando -- eu não estou pedindo que vocês o chamem de "Stallmanix"
-- certo? [Risos e aplausos]

Eu estou pedindo para o que o chamem de GNU, porque quero que o Projeto GNU
tenha crédito. E há uma razão muito específica para isso, a qual é muito mais
importante que qualquer pessoa receber crédito. Vejam, nestes dias, se você
olhar para todos os lados em nossa comunidade, a maior parte das pessoas que
falam e escrevem sobre isso nem sequer mencionam GNU, e elas nem
sequer mencionam os objetivos da liberdade -- nem os ideais políticos e
sociais, tampouco. Pois o lugar de onde eles vêm é do GNU. As idéias associadas
ao Linux -- a filosofia é muito diferente. É basicamente uma filosofia
apolítica de Linus Torvalds. Assim, quando as pessoas acham que o sistema todo
é Linux, elas tendem a pensar: "Ah, tudo deve ter sido iniciado pelo Linus
Torvalds. Devemos observar sua filosofia cuidadosamente". E quando ouvem sobre
a filosofia GNU, eles dizem: "Cara, isso é tão idealista, que deve ser
terrivelmente impraticável. Ah, eu sou usuário de Linux, não de GNU." [Risos]

Que ironia! Ah, se eles soubessem! Se soubessem que o sistema de que gostam --
ou, em alguns casos, adoram ou pelo qual são loucos -- é nossa filosofia
política e idealista posta em prática. Eles nem precisam concordar conosco.
Mas pelo menos eles vêem razão para levá-la a sério -- pensar sobre ela
cuidadosamente -- e dar a ela uma chance. Eles veriam como ela se relaciona
com suas vidas. Se percebessem: "Estou usando um sistema GNU. Veja a
filososfia GNU. Esta filosofia é a razão do porquê este sistema que eu gosto
existe de verdade." Eles pelo menos pensariam sobre ela com uma mente muito
mais aberta. Não significa que todo mundo concordaria. As pessoas pensam
coisas diferentes. Tudo bem. As pessoas devem ter suas próprias idéias. Mas eu
quero que esta filosofia colha os benefícios do crédito pelos resultados que
ela conseguir.  

Se olharmos a toda a volta em nossa comunidade, veremos que, em quase
todos os lugares, as instituições estão chamando o sistema de Linux. E sabem,
os repórteres, a maioria, o chamam de Linux. Não deveriam, mas chamam. A
maioria das empresas dizem -- tal pacote, tal sistema. Ah, e a maioria dos
repórteres, quando escrevem artigos, eles normalmente não vêem como uma
questão política, ou social. Eles normalmente vêem a coisa puramente como uma
questão de negócios ou quanto de sucesso vão ter empresas, o que é realmente
uma questão muito menor para a sociedade. E se vocês olharem para as empresas
que empacotam o sistema GNU/Linux para as pessoas usarem, bem, todas elas o
chamam de Linux e *todas* acrescentam software não livre a ele.

Veja, a GNU GPL diz que se você pega código, e código de um programa coberto
pela GPL, e acrescenta mais código para fazer dele um programa maior, aquele
programa todo deve ser lançado sob a GPL. Mas vocês podem pôr outros
programas separados no mesmo disco (de qualquer tipo, disco rígido, ou CD), e
eles podem ter outras licenças. Considera-se isso mera agregação. E,
essencialmente, apenas distribuir dois programas para alguém ao mesmo tempo é
algo de que não temos o que dizer. Mas, de fato, gostaríamos. Algumas vezes,
gostaria de que fosse verdadeiro para uma empresa que use programa coberto
pela GPL em um produto, que o produto todo fosse software livre. Não é -- não
chaga a esse ponto . É o programa como um todo. Se houver dois programas
separados que se comunicam entre si a distância de um braço -- como ao enviar
mensagens um ao outro -- então eles são legalmente separados, em geral.
Assim, essas empresas, ao acrescentar um software não livre ao sistema, dão
aos usuários, filosófica e politicamente, uma idéia muito ruim. Eles estão
dizendo aos usuários: "É normal usar software proprietário. Estamos até
colocando eles junto como bônus.

Se você olhar as revistas, sobre o uso do sistema GNU/Linux, a maioria deles
tem um título assim "Linux isso ou aquilo". Eles estão chamando o
sistema de Linux a maior parte do tempo. E estão cheios de anúncios de
software proprietários os quais podem rodar sobre o sistema GNU/Linux. Mas
estes anúncios têm uma mensagem comum. Eles dizem: "software proprietário é
bom para você. É tão bom que você pode até *pagar* para obter." [Risos] E
eles chamam isso de "pacotes de valor agregado", o que diz muito sobre seus
valores. Eles estão dizendo "Dê valor à conveniência prática, não à
liberdade". Não concordo com esse valores e os chamo de "pacotes subtraídos de
liberdade". [Risos] Pois se você instalou um sistema operacional livre, você
está no mundo livre. Você desfruta dos benefícios da liberdade, a qual
trabalhamos tantos anos para dar a você. Estes pacotes dâo a você a
oportunidade de ficar amarrado por uma corrente.

E se você vai a feiras de negócio -- sobre o uso do -- dedicada ao uso do
sistema GNU/LINUX. Elas todos se chamam "Feiras do Linux".  E ficam cheias de
estandes exibindo software proprietário, essencialmente pondo um selo de
aprovação em software proprietário. Assim, para quase todo o lugar que você
olhe em nossa comunidade -- as instituições estão endossando o software
proprietário -- negando totalmente a idéia para a qual o GNU foi
desenvolvido. E o único lugar em que as pessoas provavelmente se deparam com a
idéia de liberdade é em conexão com GNU, e em conexão com software livre: o
termo "software livre". Assim, é por isso que eu peço a vocês: por favor
chamem o sistema de "GNU/Linux". Por favor, conscientizem as pessoas de onde o
sistema veio e por quê.

Naturalmente, só de usar o nome, não estarão explicando a história
toda. Vocês podem digitar quatro caracteres adicionais e escrever "GNU/Linux";
vocês podem pronunciar duas sílabas extras. Mas, GNU/Linux tem menos
sílabas que Windows 2000. [Risos] Mas, vocês não vão estar dizendo muito, mas
preparando-os, para que quando ouvirem sobre o GNU, e do que se trata, eles
vejam como isso tem relação com eles, e suas vidas. E isso, indiretamente, faz
uma tremenda diferença. Assim, por favor ajudem-nos.

Vocês vão notar que a Microsoft chamou a GPL de "licença de código aberto".
Eles não querem que as pessoas pensem em termos de liberdade como ponto
central. Vocês vão ver que eles convidam as pessoas a pensar de forma
estreira, como consumidores. (E, claro, nem mesmo pensar muito racionalmente
como consumidores, se forem escolher os produtos Microsoft). Mas eles não
querem que  as pessoas pensem como cidadãos ou estadistas. Isso é hostil para 
eles. Pelo menos é hostil para seu modelo de negócio atual.

Agora, como age o software livre? Bem, eu posso falar como o "software livre"
ser relaciona com nossa sociedade. Um tópico secundário que pode ser de
interesse para alguns de vocês é como o software livre se relaciona com os
negócios. Afinal, a maioria das empresas dos países avançados usam software.
Só uma pequena fração desenvolve software. E software livre é tremendamente
vantajoso para qualquer empresa que usa software, pois isso significa que você
está no controle. Basicamente, software livre significa que os usuários estão
no controle do que o programa faz. Tanto individualmente, se precisarem,
quanto coletivamente, quando precisarem. Quem precisar pode exercer 
influência. Se você não precisar você pode usar o que os outros preferem. Mas
se precisar, você tem vez.

No software proprietário, essencialmente, você não tem vez. Com software
livre, você pode modificar o que quiser modificar. E não importa que não haja
programadores na sua empresa; tudo bem. Se você quiser mudar as divisórias de
sua empresa, você não deve ser capaz de achar um carpinteiro e perguntar,
quanto você vai cobrar pelo trabalho? E, se você quiser mudar algo no software
que você usa, sua empresa não precisa ser do ramo de software. É só ir a
uma empresa de software e dizer: "quanto você quer cobrar para implementar
essas mudanças? E quando quer que sejam feitas?" E se não fizerem o trabalho,
você pode pode achar outra pessoa que faça.

Há um mercado livre para suporte. Assim, qualquer empresa que dê importância a
suporte vai encontrar uma vantagem tremenda no software livre. Com software
proprietário, o suporte é um monopólio. Porque uma só empresa tem o código, ou
talvez um pequeno número de empresas que pagaram uma quantidade gigantesca de
dinheiro para obter o código-fonte, se for um programa de fonte 
compartilhado da Microsoft. Mas, é muito novo. E assim, não há muitas fontes
de suporte para você. E isso significa que a menos que você seja gigante
mesmo, eles não vão dar bola para você. Sua empresa não é tão importante para
que se sintam incomodados se a perderem como cliente, ou o que quer que
aconteça. Uma vez usando o programa, eles imaginam que você está amarrado ao
suporte deles, pois migrar para um programa diferente é um trabalho
gigantesco. Assim você acaba em situações com a de ter que pagar pelo
privilégio de reportar um bug. [Risos] E depois de pago, eles dizem: "Bem, OK,
vimos seu registro do bug. Compre o upgrade que sai daqui a alguns meses para
ver se o consertamos". [Risos]   Provedores de suporte de software livre não
podem se dar bem dessa maneira. Eles têm de agradar os clientes. Claro que não
dá para obter todo tipo de suporte de graça. Você posta mensagem de seu
problema na Internet. É bem possível que receba a respota no dia seguinte. Mas
não é garantido, naturalmente. Se você quiser ter mais garantia, é melhor fazer
um acordo com uma empresa e pagá-los. E isto é, naturalmente, uma das maneiras
como funcionam os negócios em software livre.

Outra vantagem do software livre para empresas é a segurança e a privacidade.
(E isto se aplica a indivíduos também. Mas eu mencionei no contexto das
empresas). Vejam, quando um programa é proprietário, você nem sequer pode
saber o que ele realmente faz. Ele pode ter funções, colocadas
deliberadamente, das quais você não gostaria se soubesse. Por exemplo,
ele poderia ter uma porta dos fundos, para permitir que o desenvolvedor
entre em sua máquina. Ele poderia xeretar o que você faz, e enviar a
informação para ele. Isso não é incomum. Alguns programas da Microsoft faziam
isso. Mas não é somente a Microsoft. Há outros programas proprietários que
espreitam os usuários. E, você nem consegue saber se eles fazem isso ou não. E,
claro, mesmo assumindo que o desenvolvedor seja totalmente honesto, todo
programador comete erros. Poderia haver bugs que afetam sua segurança, e
que não é culpa de ninguém. Mas, a questão é: se não for software livre, você
não vai achá-los, e não poderá consertá-los.

Ninguém tem tempo de ver o código de todos os programas que roda. Vocês não
vão fazer isso. Mas com o software livre há uma grande comunidade , e há
pessoas na comunidade que verificam essas coisas. E você tem o benefício da
verificação deles. Pois, se houver um bug acidental (com certeza há, de tempos
em tempos, em qualquer programa), eles pode achá-lo e consertá-lo. E as
pessoas estão muito menos propensas a pôr deliberadamente um cavalo-de-tróia,
ou uma função de espionagem, se imaginam que podem ser pegos. Os
desenvolvedores de software proprietário acham que não serão pegos. Eles se
safam  sem serem detectados. Mas o desenvolvedor de software livre têm de
saber que as pessoas vão ver sua presença. Assim, em nossa comunidade, sabemos
que não podemos nos dar bem se empurrarmos uma função que os usuários não
querem goela abaixo. Assim, sabemos que se os usuários não gostarem, ele farão
uma versão modificada que não tem essa função. E só ai começarão a usar essa
versão.

De fato, podemos todos pensar bastante; podemos todos imaginar muitos passos
adiante tal que provavelmente não venhamos a criar tal função. Afinal de
contas, você está escrevendo um programa livre, você quer que as pessoas
gostem de sua versão. Você não vai colocar uma coisa que você sabe que muita
gente vai odiar, e ver uma outra versão modificada ser aceita em vez da sua.
Assim, percebam que o usuário é rei, no mundo do software livre. No mundo do
software proprietário, o cliente *não* é rei. Porque você é apenas um cliente,
você não tem vez no software que você usa.
 
Neste aspecto, software livre é um novo mecanismo para a democracia operar.
Professor Lessig, agora em Stanford, observou que código de programação
funciona como um tipo de lei. Quem se põe a escrever código usado por quase
todos, para todos os fins e intenções, está escrevendo leis que dirigem a vida
das pessoas. No software livre, estas leis são escritas de modo democrático.
Não na forma clássica da democracia; não temos uma grande eleição e dizemos:
"vamos  todos votar para sabermos como deve ser esta função". [Risos] Em vez
disso dizemos, basicamente, aqueles que quiserem trabalhar na implementação
deste recurso, estão convidados. E, se você quiser trabalhar na implementação
da função deste modo, trabalhe. E o resultado acaba aparecendo, sabem? E
assim, se muitas pessoas o querem assim, assim ele será. Assim,
portanto, todo mundo contribui para uma decisão social simplesmente dando
passos na direção que queira ir.

E, você está livre, pessoalmente, para dar tantos passos, quantos queira dar.
A empresa está livre para dar quantos passos achar útil. E, depois de
adicionar todas essas coisas, isso diz para que direção vai o software.

E também é muito útil pegar partes de algum programa existente,
presume-se, normalmente partes grandes, lógico. Para depois escrever uma
quantidade de linhas de código suas próprias. E fazer um programa que faça
exatamente o que você precisar, o qual teria custado os dois olhos da cara
para desenvolver se tivesse que escrevê-lo do zero -- Você não poderia
canibalizar grandes partes de pacotes de software livre existente.

Outra coisa que resulta do fato de que o usuário é rei, é que tendemos a ser
muito bons em compatibilidade e padronização. Por quê? Porque os usuários
gostam disso! Usuários têm a tendência de rejeitar programas com
incompatibilidades gratuitas. Mas, algumas vezes há certos grupos de usuários
que na realidade têm necessidade de certos tipos de incompatibilidades. E daí
eles terão; e tudo bem. Mas, quando os usuários querem seguir um padrão, nós
desenvolvedores temos de segui-lo. E, sabemos disso. E fazemos assim. Em
contraste, se você olha para os desenvolvedores de software proprietário, eles
sempre acham vantajoso *não* seguir padrões deliberadamente. E, não porque
pensam que estão dando uma vantagem ao usuário, mas sim, porque estão se
impondo sobre os clientes -- prendendo o usuário. E você vai vê-los fazendo
mudanças em seus formatos de arquivo de tempos em tempos, apenas para forçar
as pessoas a obter a nova versão.

Arquivistas estão enfrentando um problema agora, pois arquivos escritos em
computadores há dez anos muitas vezes não podem ser acessados. Eles foram
escritos com software proprietário, está essencialmente perdido agora. Se
fosse escrito com software livre, então poderia ser atualizado e executado. E
essas coisas não -- esses registros não estariam perdidos, não estariam
inacessíveis. Eles estavam reclamando sobre isso recentemente na NPR [National
Public Radio], citando o software livre como solução. E assim, com efeito, ao
usar programas proprietários para armazenar seus próprios dados, você está
pondo a corda no pescoço.

Bom, falei como o software livre afeta muitas empresas. Mas, como ele afeta
estritamente a área particular que é o mercado de software? Bem, a resposta é
não afeta. A razão é que 90% da indústria de software, (me disseram), é
desenvolvimento de software sob medida. Software que não se destina a ser
lançado. Para software sob medida, esta questão, ou a questão ética do livre
ou proprietário, não aparece. Vejam, a questão é: "Vocês usuários estão livres
para modificar e redistribuir o software?" Se há apenas um usuário, e o
usuário é dono dos direitos, não há problema. O usuário *é* livre para fazer
todas essas coisas. Assim, com efeito, qualquer programa *sob medida*
desenvolvido por uma empresa para uso interno é software livre, contanto que
insistam em ter o código fonte, e todos os direitos.

E a questão realmente não faz sentido para software que vai em relógios de
pulso e fornos de microondas, ou no sistema de ignição do automóvel. Porque
estes não são lugares para onde você baixa software e instala. Não é um
computador real, até onde o usuário saiba. E assim, estas questões não vêm à
tona o bastante para que sejam eticamente importantes. Assim, para a maior
parte, a indústria de software vai continuar do mesmo jeito que vem fazendo.
E o interessante é que, como uma grande parte dos empregos estão nessa parte da
indústria, mesmo que não houvesse possibilidades para as empresas de software
livre, os desenvolvedores de software livre poderiam todos arranjar empregos
fixos escrevendo software sob medida. [Risos] Há tantos; a proporção é muito
grande.

Mas, mesmo assim, há mercado de software livre. Há empresas de software livre.
E, na coletiva de imprensa que vou dar, pessoas de algumas dessas empresas vão
estar junto conosco. E, naturalmente, há também empresas que *não* são do
mercado de software livre, mas  desenvolvem partes úteis de software livre
para lançar. E, o software livre que produzem é substancial.

Agora, como funciona o negócio de software livre? Bem, alguns vendem
cópias. Vocês sabem, você está livre para copiar, mas eles conseguem mesmo
assim vender milhares de cópias por mês. E, outros vendem suporte e vários
tipos de serviços. Eu, pessoalmente, na segunda metade dos anos 80, vendia
serviços de suporte de software livre. Basicamente eu dizia, por US$200 por
hora, eu mudo qualquer coisa que você queira no software GNU que escrevi. E,
claro, era uma taxa salgada, mas se era um programa do qual eu era o autor, as
pessoas imaginavam que pudesse terminar o trabalho em muito menos horas.
[Risos] E tirei meu sustento dessa maneira. De fato, ganhava mais que nunca.
Eu também dava aulas. E continuei assim até 1990, quando ganhei um grande
prêmio, e não tive mais que fazê-lo.

Mas, 1990 foi quando a primeira empresa de software livre foi criada, a Cygnus
Support. E o negócio deles era fazer, essencialmente, o mesmo tipo de coisas
que estava fazendo. Eu certamente poderia ter trabalhado para eles, se
precisasse fazê-lo. Como não precisava, senti que era bom para o Movimento se
permanecesse independente do qualquer empresa. Assim, poderia dizer
coisas boas e ruins sobre  várias empresas de software livre e não livre, sem
conflito de interesses. Senti que poderia servir mais ao Movimento. Mas, se
tivesse precisado disso para ganhar a vida, claro, teria trabalhado para eles.
É um negócio ético de se fazer parte. Não haveria razão para me envergonhar de
trabalhar para eles. E, aquela empresa conseguiu ser rentável em seu primeiro
ano. Foi formada com muito pouco capital, apenas o dinheiro que seus três
fundadores tinham. E continuou crescendo a cada ano, e sendo rentável a cada
ano, até que ficaram gananciosos, e buscaram investidores externos, e então
confundiram tudo. Foram vários anos de sucesso, antes que ficassem gananciosos.

Assim, isso ilustra uma das coisas mais empolgantes sobre software livre.
Software livre demonstra que você não precisa levantar capital para
desenvolver software livre. Quer dizer, é útil; ele *pode* ajudar. Vocês
sabem, se você levantar capital, você pode contratar pessoas e pedir que
escrevam um punhado de software. Mas você pode produzir muito com um pequeno
número de pessoas. E, de fato, a eficiência tremenda do processo de
desenvolvimento de software livre é uma das razões pelas quais é importante
que o mundo mude para o software livre. Isso desmente o que a Microsoft diz,
quando dizem: "GNU GPL é ruim, porque fica mais difícil para eles levantar
capital para desenvolver software não livre", e pegar nosso software livre e
pôr nosso código em seus programas que não querem compartilhar conosco.
Basicamente, não precisamos que levantem capital dessa forma. Faremos o
trabalho de mesmo modo. *Estamos* fazendo o trabalho.

As pessoas diziam que nunca seríamos capazes de fazer um sistema operacional
livre completo. Agora fizemos isso e tremendamente mais. E eu diria que
estamos a uma ordem de grandeza do desenvolvimento toda a necessidade
mundial de software de uso geral publicado. E isso num mundo em que mais de
90% dos usuários não usam nosso software ainda! Isto é em um mundo em que...
apesar de certas áreas de negócio, bem, mais de metade de todos os servidores
da web no mundo rodam GNU/Linux com servidor web Apache.

PERGUNTA: [Inaudível] ... O que você disse antes do Linux?

STALLMAN: Eu disse GNU/Linux.

QUESTION: Disse?

STALLMAN: Sim, estou falando do kernel, eu chamo de Linux. Vocês sabem, este é
o seu nome. O kernel foi escrito por Linus Torvalds, e devemos chamá-lo pelo
nome que ele escolheu, por respeito ao autor.

Pois bem, mas em geral nas empresas, a maioria dos usuários não o estão
usando. A maioria dos usuários domésticos não o estão usando ainda. Assim,
quando estiverem, deveremos ter 10 vezes mais voluntários, e 10 vezes mais
clientes para empresas de software livre que haverá. E assim, isso nos dará
esta ordem de grandeza. Assim, neste ponto, estou muito confiante de que
*podemos* fazer o trabalho.

E, é importante, porque a Microsoft nos pede para ficarmos desesperados. Eles
dizem:

"O único modo de você ter software funcionando; o único modo de você receber
inovação, é se você nos der poder! Deixe-nos dominar você. Deixe que
controlemos o que você pode fazer com o software que você está rodando, de
modo que possamos arrancar muito dinheiro de você e usar só uma parte disso
para desenvolver software e ficar com o resto como lucro."

Bem, você não deve se sentir tão desesperado. Você não deve se sentir tão
desesperado ao perder sua liberdade [Ironia]. Isso é muito perigoso.

Outra coisa que a Microsoft (bem, não só a Microsoft) -- as pessoas que não
dão suporte ao software livre geralmente adotam um sistema de valores para o
qual a única coisa que importa são os benefícios práticos de curto prazo.
"Quanto dinheiro vou ganhar este ano? Que trabalho posso fazer hoje?"
Raciocínio estreito e para o curto prazo. Eles assumem que é ridículo
imaginar que alguém sequer possa fazer um sacrifício pela causa da liberdade.

No passado, muitas pessoas faziam discursos sobre americanos que fizeram
sacrifícios pela liberdade de seus compatriotas. Alguns deles fizeram grandes
sacrifícios. Eles até mesmo sacrificaram suas vidas pelas liberdades que todos
em nosso país já ouviram, pelo menos. (Pelo menos, em alguns casos; acho que
temos de ignorar a guerra do Vietnã.)

[Nota do editor: o dia anterior foi "Dia da Memória" nos EUA. O Dia da Memória
é o dia em que os heróis de guerra são lembrados.]

Mas, infelizmente, para manter nossa liberdade de usar software, não peça
grandes sacrifícios, pois sacrifícios pequenos, bem pequenos já são
suficientes. Tal como aprender uma interface de linha de comando se ainda não
tivermos uma interface gráfica para o programa. Tal como fazer o trabalho
desta forma, porque ainda não temos um pacote de software livre para fazer de
outra forma. Tal como pagar a uma empresa para desenvolver um pacote de
software livre, de modo que possamos tê-lo em alguns anos. Vários sacrifícios
pequenos que todos podemos fazer. E, no longo prazo, até mesmo *nós* vamos nos
beneficiar. Vocês sabem, é de fato um investimento mais que um sacrifício!
Temos de ter uma visão de longo prazo o suficiente para perceber que é bom
para nós investir em melhorar nossa sociedade, sem contar com os tostões e
vinténs de quem obtém o benefício desse investimento.

Assim, por hora, termino por aqui.

Eu gostaria de mencionar que há uma nova abordagem para o mercado de software
livre proposto por Tony Stanco, o qual ele chama de "Desenvolvedores Livres".
E que envolve uma certa estrutura de negócios que espera com o tempo pagar um
certa parte dos lucros para todos -- para todos os autores de software livre
que trabalharem para a empresa. E estão trabalhando agora para obter para mim
alguns contratos de desenvolvimento de software muito grandes no governo da
Índia. Pois vão usar software livre desse modo -- com tremenda economia de
custos desse modo.

E assim, agora gostaria de saber se há dúvidas.

PERGUNTA: [Inaudível]

STALLMAN: Você poderia falar uma pouco mais alto por favor? Não consigo mesmo
ouvir você.

PERGUNTA: Como uma empresa como a Microsoft poderia incluir um contrato de
software livre?

STALLMAN: Bem, na realidade, a Microsoft está planejando transformar muito de
sua atividades em serviços. E, o que estão planejando fazer é algo sujo e
perigoso, que é amarrar serviços a programas, um com outros, em uma espécie de
círculo vicioso, sabe? De modo que para usar este serviço, você terá de usar o
programa da Microsoft, que vai implicar na necessidade de usar este serviço,
para este programa da Microsoft, assim tudo fica amarrado. Este é o plano
deles.

Agora, o interessante é que vender estes serviços não levanta questões éticas
sobre software livre e software proprietário! Pode até ser perfeitamente normal
para eles fazer existir o mercado para aquelas empresas que vendem serviços
pela Internet. No entanto, o que a Microsoft está planejando fazer é usá-los
para prender o usuário ainda mais -- um monopólio ainda maior -- em software e
serviços. E, isto foi descrito em um artigo, creio, na Business Week,
recentemente. E, outras pessoas disseram que isso vai transformar a Internet
em uma Vila Industrial Microsoft.

E isso é relevante, porque, sabem, o tribunal do julgamento do monopólio da
Microsoft recomendou dividir a empresa, a Microsoft. Mas de certa forma,
isso não faz sentido; não faria bem nenhum: uma parte operacional, outra de
aplicações.

Mas, ao ver aquele artigo, agora vejo uma maneira útil e eficiente para
dividir a Microsoft numa parte de serviços outra de software. E exigir que se
relacionem uma com a outra à distância de um braço. E que a [divisão] de
serviços tenha de publicar suas interfaces, de modo qualquer um possa escrever
um cliente que converse com esses serviços. E, imagino, que eles tenham de
pagar para acessar o serviço; bem, isso tudo bem. É uma questão totalmente
diferente.

Se a Microsoft for dividida desse modo [...], "serviços e software", eles não
poderão usar seu software para esmagar a concorrência com serviços Microsoft.
E não poderão usar [a divisão de] serviços para esmagar a concorrência com
software Microsoft. E poderemos fazer software livre, e talvez vocês o usarão
para conversar com os serviços Microsoft, e não nos importaremos!

Porque, afinal de contas, apesar de a Microsoft ser a empresa de software
proprietário que tem subjugado a maioria das pessoas, os outros subjugaram
menos pessoas; não é por falta de tentar [Risos], eles só não conseguiram
subjugar a mesma quantidade de pessoas. Assim, o problema não é a Microsoft, e
só a Microsoft. Microsoft é só o maior exemplo do problema que estamos
tentando resolver, que á o software proprietário tirando a liberdade dos
usuário de cooperar e formar uma sociedade ética. Assim, não devemos nos focar
muito na Microsoft. Você sabem, mesmo que eles não me dessem a oportunidade
desta tribuna, isso não faz deles tão importantes. Eles não são a razão nem o
fim de tudo.

PERGUNTA: Lá atrás, você estava discutindo as diferenças filosóficas entre
software de código aberto e software livre. O que você acha da
tendência das distribuições GNU/Linux à medida que partem para o suporte
somente para plataformas Intel? E o fato de que parece que cada vez menos
programadores estão programando corretamente e fazendo software que compile em
qualquer lugar. E fazendo software que só funciona em sistemas Intel.

STALLMAN: Não vejo problemas éticos aí. Apesar, é verdade, de que alguns
fabricantes de computador algumas vezes portam o sistema GNU/Linux para ele.
HP aparentemente fez isso recentemente. E, eles não se dignaram a pagar
pelo porte do Windows, porque lhes teria custado caro. Mas para ter suporte
para GNU/Linux foi, penso eu, cinco engenheiros por uns poucos meses. Foi
facilmente executável.

Agora, naturalmente, eu incentivo as pessoas a usar autoconf, que é um pacote
GNU que facilita tornar seus programas portáveis. Incentivo a usá-lo. Ou
quando alguém conserta um bug que não compila naquela versão do sistema, e o
envia a você, você deve colocá-lo. Mas eu não vejo uma questão ética.

PERGUNTA: Dois comentários. Um é: recentemente, você falou no MIT. Eu li a
transcrição. E alguns perguntaram sobre patentes, e você disse que "patente é
uma questão totalmente diferente. Não tenho comentários sobre isso."

STALLMAN: Certo. Eu na realidade tenho muito a dizer sobre patentes, mas leva
uma hora. [Risos]

PERGUNTA: Queria dizer o seguinte: a mim me parece que há uma questão. Quer
dizer, há uma razão pela qual as empresas reivindicam patentes e direitos de
cópia -- tem a ver com propriedade, para tentar entender o conceito. E que é
usar o poder do Estado para criar um monopólio. E assim, o que é comum nessas
coisas não é que eles passam por cima dessas questões, mas que a motivação não
é mesmo uma questão de servir ao público, mas a motivação das empresas de
fazer um monopólio para seus interesses privados.

STALLMAN: Eu entendo. Mas, bem, vou responder, pois não temos muito tempo.
Assim quero responder a isso.

Você está certo que isso é o que querem. Mas há outra razão por que querem
usar o termo "propriedade intelectual". É porque eles não querem que as
pessoas pensem com cuidado sobre as questões do direito de cópia ou patentes.
Porque as leis de direito de cópia e as leis de patente são totalmente
diferentes, e os efeitos dos direitos de cópia de software e de patente de
software são totalmente diferentes.

As patentes de software são uma restrição aos programadores -- proibindo-os de
escrever certos tipos de programa. Ao passo que o direito de cópia não faz
isso. Com direito de cópia, pelo menos, se você escreveu tudo, você tem
permissão de distribui-lo. Assim, é tremendamente importante separar essas
questões.

Elas têm pouco em comum, numa intensidade muito baixa. E tudo mais é
diferente. Assim, por favor, para incentivar o esclarecimento, discutam
direito de cópia ou discutam patentes. Não discutam "propriedade intelectual".
E não tenho opinião sobre "propriedade intelectual". Tenho opiniões sobre
direitos de cópia e patentes e software.

PERGUNTA: Você mencionou no começo que uma linguagem funcional, como receitas,
são programas de computador. Há um ponto um pouco diferente de outros tipos
de linguagem criadas a partir daí. Isto está causando um problema no caso do
DVD.

STALLMAN: As questões são em parte similares, em parte diferentes, para coisa
que não são funcionais por natureza. Parte da questão se aplica, mas não tudo.
Infelizmente, isso significa mais uma hora de palestra. Eu não tenho tempo
para discorrer sobre isso. Mas, eu diria que todas as obras funcionais
deveriam ser livres do mesmo jeito que software. Por exemplo: livros-texto,
manuais, dicionários, receitas, assim por diante.

PERGUNTA: Eu estava pensando na música pela rede, há similaridades e
diferenças totais criadas.

STALLMAN: Correto. eu diria que a liberdade mínima que deveríamos ter para
*qualquer* tipo de informação publicada, é a liberdade de redistribuí-la não
comercialmente, inalterada. Para obras funcionais, precisamos da liberdade de
publicar *comercialmente* a versão modificada, porque isso é tremendamente
útil para a sociedade. Para trabalhos não funcionais, você sabe, coisas para
entreter, ou estéticas, ou para afirmar os pontos de vista de uma pessoa,
talvez não devessem ser modificadas. E, talvez isso seja OK, ter direito de
cópia cobrindo toda a distribuição *comercial* dele.

Por favor, lembrem-se de que de acordo com a Constituição dos EUA, a
finalidade do direito de cópia é beneficiar o público. É para modificar o
comportamento de certas instituições privadas, para que publiquem mais livros.
E o benefício é que a sociedade discuta questões, aprenda e tenhamos
literatura. Tenhamos trabalhos científicos. E o propósito é incentivar isso.
Direitos de cópia não existem por causa dos autores, muito menos por causa dos
editores. Eles existem por causa dos leitores e daqueles que se beneficiam da
comunicação da informação que acontece quando as pessoas escrevem e as outras
lêem. E com o objetivo, eu concordo!

Mas, na era das redes de computadores, o *método* não é mais defensável,
porque agora exige leis draconianas que invadem a privacidade de todos e
aterrorizam todo mundo. Você sabe, anos de prisão por compartilhar com os
outros. Não era assim nos tempos da imprensa impressa. Naquela época, o
direito de cópia era uma regulamentação industrial. Restringia os editores!
*Agora*, é uma restrição imposta pelo editores ao público. Assim, o
relacionamento do poder deu uma volta de 180 graus, mesmo sendo a mesma lei.

PERGUNTA: Assim, você pode ter a mesma coisa -- tal como ao fazer uma
música a partir de outra.

STALLMAN: Correto.  Isso é interessante.

PERGUNTA: E trabalhos novos e exclusivos, você sabe, muito ainda é cooperação.

STALLMAN: É. Eu penso que isso provavelmente exige algum tipo de conceito do uso
justo. Certamente samplear alguns segundos e usar isso ao fazer uma obra
musical: obviamente deveria ser uso justo. Mesmo que a idéia padrão do uso
justo inclua isso, se você pensar sobre isso. Os tribunais vão concordar? Não
sei ao certo, mas deveriam. Isso *não* seria uma mudança real no sistema do
modo como existiu.

PERGUNTA: O que você acha de publicar informações *públicas* em formatos
proprietários?

STALLMAN: Ah, não deveria ser. Quero dizer, o Governo nunca deveria pedir aos
cidadãos que usassem programas não livres para acessar e se comunicar com o
Governo desse modo, em todos os sentidos.

PERGUNTA: Tenho sido, o que agora vou dizer, um usuário GNU/Linux...

STALLMAN: Obrigado.  [Risos]

PERGUNTA: ... nos últimos quatro anos. E uma coisa que tem sido problemática
para mim e é algo essencial, eu acho, para todos nós, é navegar na Internet.

STALLMAN: Sim.

QUESTION: Uma das coisa que decididamente tem sido um ponto fraco ao usar o
sistema GNU/Linux tem sido navergar na Internet, porque a ferramenta principal
para isso, Netscape...

STALLMAN: ...Não é software livre.

Deixe-me responder isso. Eu quero chegar ao ponto, para falar um pouco mais.
Portanto, sim. Tem havido uma tendência terrível das pessoas usarem o Netscape
Navigator em seus sistema GNU/Linux. E, de fato, todos os pacotes comerciais
vem com ele. Assim é uma situação irônica: trabalhamos tanto para fazer um
sistema operacional *livre*, e agora, se você vai na loja, você pode encontrar
as versões lá do GNU/Linux (a maioria delas se chama "Linux"), e não são
livres. Ah, bem, uma parte deles é. Mas então, há o Netscape Navigator, e
talvez outros programas proprietários também. Assim é muito difícil realmente
encontrar um sistema livre, a não ser que você saiba o que está fazendo! Ou,
obviamente, você pode [simplesmente] não instalar o Netscape Navigator (com
os sistema comerciais].

Agora, na verdade, tem havido navegadores livres por muitos anos. Há o
navegador livre que usava chamado "Lynx". É um navegador livre não gráfico; é
só texto. É uma vantagem tremenda já que você não vê os anúncios. [Risos]
[Aplausos]

Mas de qualquer forma, há o projeto gráfico livre chamado "Mozilla", que está
chegando ao pondo em que se pode usá-lo. Eu o uso de vez em quando.

PERGUNTA: O Konqueror 2.01 tem sido muito bom.

STALLMAN: Ah, OK. Então, este é outro nevegador gráfico gratuito. Assim,
estamos finalmente resolvendo o problema, penso eu.

PERGUNTA: Você pode me falar sobre aquela divisão ética/filosófica entre
software livre e código aberto? Você acha que elas são irreconciliáveis?...

[troca de fitas de gravação; o fim da pergunta e o começo da resposta não
foram gravados]

STALLMAN: .... para uma liberdade, e ética. Ou quer você apenas diga: "bem,
espero que suas empresas decidam o que é mais lucrativo para deixar-nos fazer
essas coisas"

Mas, como eu disse, em muitos trabalhos práticos, não importa de fato o qual é
a política da pessoa. Quando alguém se oferece para ajudar o projeto GNU,
dizemos: "Você tem de concordar com nossa política". Dizemos isso no pacote
GNU, você tem chamar o sistema, GNU/Linux, e você tem de chamá-lo de software
livre. O que você diz quando não fala com o projeto GNU; fica a seu critério.

PERGUNTA: A IBM começou uma campanha para agências do governo para vender
suas novas máquinas de grande porte usando Linux como ponto de venda, e dizem
"Linux"!

STALLMAN: Sim, naturalmente, é de fato o sistema GNU/Linux. [Risos]

QUESTION: É isso aí! Bem, fale com os vendedores-chefe. Eles não sabem nada do
GNU.

STALLMAN: Tenho que falar com quem?

QUESTION: Com o líder dos vendedores.

STALLMAN: Ah sim. O problema é que eles já cuidadosamente decidiram o que
querem dizer por razões que lhes tragam vantagens. E a questão do que como
mencioná-lo de forma mais precisa, ou justa ou correta não é a questão
principal que importa a uma empresa como essa. Agora, algumas empresas
pequenas, sim, têm um dono E se o dono estiver inclinado a pensar desse
modo, ele pode tomar essa decisão. Não uma empresa gigante, porém. É uma
vergonha, vocês sabem.

Há um outra questão mais importante e mais substancial sobre o que a IBM está
fazendo. Eles estão dizendo que estão investindo bilhões de dólares no "Linux".
Mas talvez, eu devesse dizer "no" entre aspas, também, porque parte do
dinheiro é para pagar a pessoas para desenvolver software livre. Isso é uma
contribuição de fato para nossa comunidade. Mas, outra parte é para pagar
pessoas para escrever software proprietário, ou portar software proprietário
para rodar no GNU/Linux, e isso *não* é uma contribuição para nossa
comunidade. Mas, a IBM está juntando tudo [num pacote só]. Uma parte disse
poderá ser para publicidade, que, é em parte uma contribuição, mesmo que
parcialmente errado. Assim, é uma situação complicada. Parte do que estão
fazendo é um contribuição e parte não é. E parte é de certa forma, mas não
exatamente. E não dá para juntar tudo isso e pensar:"Nossa! Puxa! um bilhão de
dólares da IBM." [Risos] Isso é simplificar demais.

PERGUNTAS: Você pode falar um pouco mais sobre as idéias presentes na licença
pública geral?

STALLMAN: Bem, este é o -- desculpe, estou respondendo a pergunta dele agora.
[Risos] 

SCHONBERG: Você quer reservar algum tempo mais para a coletiva de imprensa? Ou
quer continuar aqui?

STALLMAN: Quem está aqui para a coletiva de imprensa? Não muita gente da
imprensa. Ah, três -- OK. Dá para segurar se nós -- seu eu continuar
respondendo as perguntas de todos por mais dez minutos? OK. Bem, vamos
continuar respondendo as perguntas de todos.

Bem, a idéia presente na GNU GPL? Parte dela é que eu queria proteger a
liberdade da comunidade contra o fenômeno que eu descrevi sobre o X Windows,
que aconteceu com outros programas livres também. De fato, quando pensava sobre
esta questão, o X Windows não tinha sido lançado ainda. Mas tinha visto este
problema acontecer em outros programas livres. Por exemplo, o TeX. Queria
garantir que os usuários todos tivessem liberdade. Doutro modo, eu pensava que
pudesse escrever um programa, e talvez muita gente usasse o programa, mas não
teriam liberdade. E daí veja que problema?!

Mas, a outra questão em que estava pensando era: eu quero dar à comunidade o
sentimento de que não somos capacho -- um sentimento de que não éramos presas
de nenhum parasita que se misturasse com a gente. Se você não usa copyleft,
você essencialmente está dizendo: [falando baixinho] "Leve meu código. Faça o
que quiser. E não digo não". Assim, qualquer um pode vir e dizer: [falando bem
firme] "Ah, eu quero fazer uma versão proprietária disso. Vou pegar isso". E
então, provavelmente, fazem alguns aperfeiçoamentos. Estas versões
proprietárias podem ter apelo para os usuários, e substituir as versões
livres. E daí veja o que você fez! Você fez fez uma doação para um  projeto de
software proprietário!

E quando as pessoas vêem o que está acontecendo -- quando as pessoas vêem:
"outras pessoas pegam o que faço e nem sequer me devolvem", isso pode ser
desmoralizante. E, isto não é só especulação. Eu tinha visto isso acontecer.
Isso foi parte do que aconteceu, fazendo desaparecer a antiga comunidade à
qual eu pertencia nos anos 70. Algumas pessoas passara a não ser mais
cooperativas. E achávamos que elas estavam lucrando com isso. Elas certamente
agiam como se estivessem lucrando. Mas percebemos que elas recebiam
cooperação, mas não davam contrapartida. E não havia nada que pudéssemos
fazer. Foi muito desencorajador. Nós, os que não gostávamos dessa tendência,
até discutimos o assunto e não conseguíamos apresentar uma idéia para
impedir isso.

Assim, a GPL foi pensada para impedir isso. Ela diz: "Sim, você está convidado
a se *unir* à comunidade e usar este código. Você pode usá-lo para fazer todo
o tipo de trabalho. Mas, se você lançar uma versão modificada, você tem de
lançá-la *para* nossa comunidade, como parte de nossa comunidade -- como parte
do mundo livre".

Então, de fato, ainda há muitos modos de as pessoas se beneficiarem de nosso
trabalho e não contribuir. Por exemplo, você não é obrigado a escrever nenhum
software. Muitas pessoas usam o GNU/Linux, e não escrevem software. Ninguém
exige que você tenha de fazer algo para nós. Mas se fizer certas coisas, você
tem de contribuir com ela. Isso significa que nossa comunidade não é capacho.
E acho que isso ajudou a dar às pessoas a força para sentir: "Sim, não seremos
simplesmente pisoteados por todo mundo. Seremos capazes de resistir a isso".

PERGUNTA: Sim, minha pergunta era, considerando software livre mas não com
copyleft. Como todo mundo pode pode pegá-lo e fazê-lo proprietário, não é
possível pegá-lo, e fazer mundanças e lançar a coisa toda sob GPL?

STALLMAN: Sim, é possível.

PERGUNTA: Então, isso faria todas as cópias daí serem GPL?

STALLMAN: Deste ramo em diante. Mas veja por que não fazemos isso.

PERGUNTA: Hmm?

STALLMAN: Veja por que normalmente não fazemos isso.  Deixe-me explicar.

QUESTION: OK, sim.

STALLMAN: Poderíamos, se quiséssemos, pegar o X Windows, e fazer uma versão
coberta pela GPL, e fazer mudanças nele. Mas, mas há um grupo muito maior de
pessoas trabalhando na melhoria do X Windows e *não* tornando-o GPL. Assim, se
fizéssemos isso, estaríamos produzindo um fork [bifurcação na linha de
desenvolvimento]. E não é um tratamento muito legal. E, eles *são* parte de
nossa comunidade, contribuindo com nossa comunidade.

Segundo, isso seria um tiro pela culatra, porque eles estão fazendo um
trabalho muito maior no X que nós faríamos. Assim, nossa versão seria inferior
à deles, e as pessoas não iriam querer usá-lo, o que significa: por que se dar
ao trabalho?

PERGUNTA: Mmm hmm.

STALLMAN: Assim, quando um pessoa escreve algum melhoramento do X Windows, o
o que eu digo que essa pessoa deveria fazer é: cooperar com a Equipe de
Desenvolvimento do X. Envie a eles e deixe que usem desse modo. Porque eles
*estão* desenvolvendo um parte muito importante do software livre. É bom para
nós cooperar com eles!

PERGUNTA: Exceto, considerando o X, em particular, há mais ou menos dois anos,
O Consórcio X que estava bem mergulhado no código aberto "não livre"...

STALLMAN: Bem, na realidade *não era* código aberto. Não era código aberto,
mesmo. Eles podem ter dito que era. (Não me lembro se disseram isso ou não.)
Mas não era código aberto.

Era restrito. Você poderia distribuir comercialmente, eu acho. Ou não poderia
distribuir comercialmente a versão modificada, ou algo do tipo. Havia uma
restrição considerada inaceitável tanto pelo Movimento de Software Livre
quanto pelo Movimento de Código Aberto.

E sim, é aberto para um uso que a licença "não copyleft" permite. De
fato, o Consórcio X; eles têm uma política muito rígida. Eles dizem: "Se seu
programa tiver copyleft mesmo que seja um pouquinho, não o distribuiremos de
jeito nenhum. Não vamos colocá-lo em nossa distribuição." Assim, muita gente
foi pressionada a não usar copyleft. E o resultado foi que todo o software
dessa gente estava por aí, mais tarde. Quando as mesmas pessoas que tinham
pressionado o desenvolvedor a ser permissivo demais, o pessoa do X depois
disse: "Muito bem. Agora vamos colocar restrições", o que não foi muito ético
da parte deles.

Mas, dada a situação, não iríamos querer gastar os recursos para manter uma
versão alternativa do X coberta pela GPL. E não faria sentido nenhum fazer
isso. Há muitas outras coisa que precisamos fazer. Vamos fazê-las então. E
podemos cooperar com os desenvolvedores do X.

PERGUNTA: Você tem um comentário: o GNU é uma marca registrada? E é possível
incluir como parte da Licença Geral Pública [GPL] GNU marcas registradas?

STALLMAN: Estamos, na realidade, registrando a marca GNU. Mas isso não teria
nada a ver com isso. É uma longa história explicar por quê.

PERGUNTA: Você poderia exigir que a marca registrada fosse apresentada em
programas cobertos pela GPL.

Não, não acho. As licenças cobrem programas individuais. E, quando um dado
programa é parte do projeto GNU, ninguém está mentido. O nome do sistema como
um todo, é uma questão diferente. E isto é um detalhe. Não vale a pena
discutir adiante.

PERGUNTA: Se houvesse um botão, que você, pressionando, forçasse
todas as empresas a liberar o software deles você o pressionaria?

STALLMAN: Bem, eu o usaria para software publicado. Você sabe, eu acho que as
pessoas têm o direito de escrever programas privados, e usá-los. E isso inclui
as empresas. É uma questão de privacidade. E é verdade, pode haver momentos em
que seja errado fazer isso, exemplo, se for tremendamente útil para a
humanidade e você está segurando isso da humanidade, o que é um erro, mas esse
é um tipo de erro diferente. É um tipo diferente de questão, apesar de ser da
mesma área.

Mas sim, eu acho que todo o software publicado deveria ser software livre. E
lembrem-se de que, quando o software não é livre, é por causa da intervenção
do Governo. O Governo está intervindo para fazê-lo não livre. O Governo está
criando poderes legais especiais para dar aos donos dos programas, assim eles
podem mandar a polícia nos impedir de usar os programas de certas maneiras. Eu
certamente gostaria de dar fim a isso.

SCHONBERG: A apresentação de Richard invariavelmente gerou enorme quantidade
de energia intelectual. Eu sugeriria que parte dela deva ser dirigida para
usar e possivelmente escrever software livre.

Temos de encerrar o evento, rapidamente. Eu quero dizer que Richard injetou
numa profissão, conhecida do público em geral pela "nerditude apolítica"
terminal, um nível de discussão política e moral, penso eu, sem precedentes em
nossa profissão. E devemos muito a ele por isso. Gostaria de avisar a todos
que haverá um intervalo.

[Aplausos]

STALLMAN: Vocês estão livres para sair quando quiserem, tá? [Risos] Não os
estou mantendo prisioneiros aqui.

[A platéia sai...] 

[Conversas paralelas....]

STALLMAN: Só mais uma coisa.  Nosso site é : www.gnu.org
