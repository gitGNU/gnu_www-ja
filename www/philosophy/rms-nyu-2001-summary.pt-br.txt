Stallman Condensado
-------------------
O que se segue é um resumo da palestra de Richard M. Stallman em 29 de Maio
de 2001 na Universidade de Nova Iorque entitulada "Software livre: Liberdade
e Cooperação".
Como o discurso original é extenso, espero que esta versão reduzida seja mais
adequada ao leitor casual.

Tradução de Edgard Lemos <edgard@edconsultoria.com.br>

O texto completo em português pode ser encontrado em:
http://www.gnu.org/philosophy/rms-nyu-2001-transcript.pt-br.txt

Uma outra tradução pode ser encontrada em:
http://www.msantunes.com.br/palestra.htm

O texto original em inglês pode ser encontrado aqui:
http://www.gnu.org/events/rms-nyu-2001-transcript.txt



Nem todo mundo é programador
----------------------------

RMS começa sua apresentação com uma analogia que se pode usar para explicar
software livre para pessoas sem conhecimento técnico: a troca de receitas
culinárias. "Alguns de vocês talvez não escrevam programas, mas talvez
cozinhem", e a analogia continua, "e se seguem receitas, provavelmente já
tiveram a experiência de obter uma cópia da receita de um amigo." Compartilhar
é uma característica muito próxima do princípio sobre o qual se fundamenta o
movimento de software livre: esta informação útil, especificamente o código do
qual os programas distribuídos publicamente são compilados, devem estar
disponíveis para todos. Continuando a comparação, uma vez que você tenha uma
cópia da receita, você está livre para mudá-la para satisfazer seus gostos
individuais,  "acrescentar cogumelos, porque você gosta de cogumelos", por
exemplo. Este é outro princípio do software livre: deve-se ser capaz de
modificar o código do programa conforme se deseja. Se você cozinha para seus
amigos a partir dessa receita modificada, eles podem gostar da sua criação e
querer conhecer a nova receita. Assim como ao distribuir uma cópia modificada
de software livre, você compartilha porque  "é assim que agem as pessoas
decentes".

Agora o argumento principal: se as receitas fossem como software proprietário,
daí a história toda seria muito diferente. Suponha que você receba a receita
como uma caixa preta, cujo conteúdo você não possa mudar, mas que produza o
mesmo prato exatamente como o do seu amigo. Daí você não poderia modificar o
prato de acordo com seu gosto e jamais poderia compartilhar com seus amigos a
versão modificada (e possivelmente melhorada) daquele prato.  Software
proprietário é baseado em um sistema de valores "no qual a decência comum para
com outras pessoas é proibida ou impedida.", e que se opõe ao sistema de troca
que as pessoas normalmente entendem e usam com receitas culinárias.


O massacre da impressora a laser
--------------------------------

Contando um pouco de sua própria história, RMS explica como veio a perceber os
perigos do software proprietário durante os anos 1970 quando trabalhava no
Laboratório de Inteligência Artificial do MIT. Seu grupo recebeu uma impressora
a laser da Xerox nova em folha para usar com seu computador PDP-10, mas ela
engasgava freqüentemente. Isto causava muitos transtornos já que não havia meio
de saber, sem ir fisicamente examinar a impressora, que ela havia engasgado.
Assim, eles tiveram a idéia de modificar o software da impressora para
notificar os usuários do sistema de que ela tinha engasgado. Isto parecia muito
natural para este grupo particular de pesquisadores já que o laboratório
trocava código de programas e informações livremente. Afinal de contas, eles
tinham criado seu próprio sistema operacional em linguagem assembly e este era
meramente um software para impressão. Infelizmente, o software tinha sido
fornecido de somente de forma binária e eles não tinha o código-fonte para
fazer modificações [N.T.: o código-fonte contém as instruções do programa
inteligíveis por humanos e a forma binária é entendida pelo processador da
máquina e só contém zeros e uns]. Pior ainda, a Xerox se recusou a dar-lhes o
código-fonte. E assim, "só nos restava sofrer com as demoras "; "frustrante à
beça," ele explica.


Acordos de confidencialidade fazem vítimas
------------------------------------------

A história da impressora continua: uma pessoa da Universidade Carnegy Mellon
tinha o código-fonte, mas se recusou a dá-lo ao grupo do MIT porque "ele tinha
prometido a se recusar a cooperar conosco ... ele tinha assinado um acordo de
confidencialidade". Pelos termos do acordo, esse cidadão que tinha  o código
fonte "tinha prometido não cooperar com simplesmente toda a população do
Planeta Terra". Isto levou RMS a chegar à conclusão de que, apesar das
compensações e das tentações do toma-lá-dá-cá, os acordos de confidencialidade
fazem vítimas porque forçam a pessoa a recusar a troca de informações de uso
geral, e portanto tornando a vida de seus pares humanos mais difícil, Como
conseqüência, RMS diz: "jamais assinei um contrato de confidencialidade para
informações técnicas de utilidade geral, como software". 

Nasce o GNU
-----------

Depois do desaparecimento de seu grupo no MIT e da contemplação das lições
aprendidas até então, RMS decidiu que "desenvolveria um sistema operacional
livre -- ou morreria tentando... de velho". 
Ele decidiu modelar seus sistema pelo UNIX, por causa da compatibilidade e
portabilidade. A modularidade do sistema permitia que suas partes fossem
desenvolvidas uma a uma, produzindo assim gradualmente  um sistema completo,
removendo as partes proprietárias que compõem a maior parte dos sistemas UNIX.
No espírito da cultura hacker, ele usou uma sigla recursiva para designar o
software GNU, que quer dizer  "GNU's Not UNIX" e se pronuncia "guh-NEW".

Lentamente, partes do sistema começaram a ser escritas, e elas eram
"substitutos igualmente bons, com menos bugs ... mas não eram programas
tremendamente empolgantes". Então em princípios de 1985, como RMS "não tinha
intenção de aprender a usar VI, o editor UNIX" para arquivos texto, ele
completou o GNU Emacs, um editor de texto versátil. Rapidamente outros usuários
queriam uma cópia e RMS percebeu que tinha definir um esquema de distribuição.
Qualquer um com acesso a rede e um cliente FTP poderia obter o software de
graça, e os que não tinham poderiam obter uma fita por $150.


$150 por software livre - os dois sentidos de "free"
----------------------------------------------------

Este é um ponto de confusão geral: como pode software livre custar $150? A
resposta é que a palavra inglesa "free"" em dois sentidos diferentes. O "free"
do movimento de software livre tem a ver com compartilhar e promover
liberdades. No entanto, muitas pessoas acham que significa "livre" como em
"livre de ônus"" e ao passo que muito software livre pode ser obtido sem
pagamento, ninguém está impedido de cobrar pela cópia. RMS apresenta este
argumento ao dizer "pensem em liberdade de expressão, não boca-livre". De fato,
isso é o que faz quase toda a distribuição GNU/Linux: reúne software livre para
atender as necessidades de um grupo de usuários. Sobre a questão do preço do
software, RMS diz, "não sou contra outros programadores receber dinheiro. Não
quero que os preços sejam baixos. Não é essa absolutamente a questão. A questão
é liberdade."


As quatro liberdades do software livre
--------------------------------------

Tendo aludido às qualidades do software livre até aqui, RMS agora expõe as
quatro liberdades do software livre. (Note que são indexadas em zero).

A primeira é a Liberdade Zero, a liberdade para usar software do jeito que
quiser. RMS nota que "a maioria dos programas lhe dão pelo menos a Liberdade
Zero", e que o software que não dá "é um programa para lá de restritivo".

A Liberdade Um é a liberdade de modificar o software para atender sua
necessidade. Lembre-se do exemplo da impressora a laser da Xerox no laboratório
de IA do MIT, e como esta liberdade os teria permitido re-escrever o software
para facilitar suas vidas. Em geral, quando não se concede esta liberdade,
"você fica prisioneiro de seu software" e "causa prejuízos práticos e materiais
à sociedade", tanto quanto os pesquisadores eram prisioneiros do software de
sua impressora e sofreram por causa dele.

A Liberdade Dois é a liberdade de distribuir o software para qualquer outra
pessoa, e ao fazer isso "ajudar os outros". Lembre-se da analogia das receitas
culinárias e de que trocá-las é "é o recurso mais importante da sociedade".
RMS argumenta que as leis impedem compartilhar software são baseadas na lógica
que se aplica normalmente a bens físicos, quando na realidade há vastas
diferenças entre bens físicos e software. Por exemplo, gasta-se muito mais
recurso para produzir um exemplar de um automóvel que para produzir cópia de
software.

A Liberdade Três é a liberdade de distribuir versões alteradas do software, e
fazendo assim cultivar uma comunidade centrada na evolução do software. Quando
você compartilha uma versão modificada de uma receita culinária que obteve de
um amigo, você está exercitando uma analogia desta liberdade.


Código aberto e software livre: dois objetivos diferentes
----------------------------------------------------------

Uma fonte de confusão sobre o movimento de software livre é a insistência que
de ele e o movimento de software livre são inerentemente diferentes. RMS afirma
que eles diferem em seus objetivos: software livre tem o objetivo filosófico de
promover as quatro liberdades listadas acima ao passo que o software de código
aberto tem o objetivo prático de promover lançamento de software cujos fontes
estejam disponíveis sob um licença que atenda uma certa definição. Em geral,
isso significa que as liberdades concedidas pelos vários tipos de licenças de
software de código aberto são um subconjunto das liberdades maiores concedidas
pelas licenças de software livre. RMS diz que os membros do Movimento do Código
Aberto "citam apenas os benefícios práticos" do software livre e apesar de
terem "contribuído substancialmente para nossa comunidade", ele diz que
"filosoficamente, há um tremendo desacordo".


Como se mede a liberdade?
-------------------------

Saber se um software é livre ou não pode depender de onde a medida é feita. No
exemplo do X Windows, a licença permite liberdades diferentes para grupos
diferentes. Os desenvolvedores do X Windows têm todas as quatro liberdades e
assim, para eles é software livre. Os usuários, em geral, não têm nenhuma das
quatro liberdades exceto a Liberdade Zero, e assim não é software livre para
eles. De modo similar, algumas empresas pegam os fontes, modificam-no, lançam
somente versões binárias e então seus usuário só ficam com a Liberdade Zero.

RMS temia que "se a mesma coisa tivesse acontecido com o software GNU, ele
teria sido um fracasso". Assim ele pensou num jeito de evitar que isso
acontecesse, um modo de dar liberdade a todos os usuários de software,
independente das modificações.


Copyleft
--------

O método que RMS inventou é chamado de "copyleft", assim chamado porque "é como
copyright [direito autoral] só que de cabeça para baixo". Software livre dá
todas as quatro liberdades e, via copyleft, usa a lei do direito autoral para
garantir que todos os trabalhos derivados [tenham] todas as quatro liberdades.
Sob estas condições, o paradoxo do X Windows, software livre que nem sempre é
livre, não acontece. A licença que permite isso, a qual é usada em muitos
softwares livres, é a Licença Pública Geral ou GNU GPL (General Publica
License), "uma licença controversa -- porque na realidade tem o poder de dizer
não a pessoas que queiram ser parasitas de nossa comunidade."


Por que GNU/Linux?
------------------

Primeiro apareceu o GNU em 1984 e subseqüentemente em 1985 a Fundação do
Software Livre foi criada. O trabalho continuou no sistema GNU e em 1991 apenas
uma parte crucial estava faltando: o kernel [N. T.: o núcleo, parte central do
sistema operacional]. Foi então que Linus Torvalds combinou o sistema GNU com
seu kernel Linux monolítico para criar o primeiro sistema GNU/Linux. E este é
o ponto que RMS mais enfatiza: "quando falo do kernel, eu o chamo de Linux" ,
de outro modo, o sistema completo deve ser chamado de GNU/Linux uma vez que
ambos, o sistema GNU e o kernel [Linux], têm de ser combinados para criar um
todo completo.


Software livre e os negócios
----------------------------

Tendo já discutido como software livre dá poder na mão dos usuários, RMS se
ocupa em esclarecer por que, apesar da recente investida da Microsoft, o
software livre é bom para os negócios.

Usuários com as quatro liberdades é a primeira vantagem que as empresas podem
receber do software livre, já que as próprias empresas são usuários de
software, normalmente em larga escala. Assim uma empresa tem a oportunidade de
controlar o software que usa, em vez de ficar à mercê dos bugs e dos recursos
decididos pelo fabricante de software proprietário. Além disso, as empresas
podem se beneficiar da inspeção do código do software livre para garantir
privacidade para seu próprio bem (impedindo o uso de "spyware""[N. T.:
recursos ou programas para invasão de privacidade] e agir para sanar quaisquer
falhas de segurança que possam existir (em vez de esperar que o fabricante de
software proprietário teste e distribua a solução).

Para as empresas que desenvolvem suas próprias aplicações internas, software
livre promove re-uso de código, eliminando assim perdas, poupando tempo e
dinheiro. Como uma licença do tipo GPL requer que os fontes só sejam fornecidos
quando o software modificado é disponibilizado ao público, as aplicações
desenvolvidas para uso interno que possam incorporar tencologia proprietária
não precisam rodar em conflito com a GPL. Este argumento parece contrariar
especificamente o questionamento da Microsoft de que as empresas não podem usar
software livre sem pôr em risco sua própria tecnologia proprietária, uma
posição que RMS acredita ser não verdadeira.

RMS também afirma que o uso do software livre promove padronização e
compatibilidade. As empresas poderão achar isso atraente já que podem impedir a
aparente obsolescência planejada de produtos e formatação de dados, os quais
ocorrem com software proprietário. Um exemplo óbvio neste caso pode ser o Word
do Microsft Office, para cujas novas encarnações freqüentemente se introduz
documentos incompatíveis retroativamente. 

Isso não responde a questão das empresas de software livre e que modelos de
negócios há disponíveis para elas. No entanto, vários modelos já existem e RMS
dedica algum tempo para descrevê-los. O primeiro deles é o modelo de suporte,
o qual quase toda distribuição GNU/Linux oferece. As distribuições também
conseguem ganhar dinheiro com vendas a varejo da versão de seu pacote
GNU/Linux; no entanto, é ainda possível baixar estes sistemas de graça. A
Cygnus Support também oferece suporte a software GNU, desde 1989. Um método de
ganhar dinheiro com software livre é cobrar do cliente pela adição de
funcionalidades a uma aplicação existente, RMS também aponta o movimento
recente FreeDevelopers de Tony Stanco como um modelo que tem potencial de
sucesso ao pagar programadores para desenvolver software livre.


Fechamento
----------

Antes de ouvir as perguntas dos presentes, RMS expressa sua tese de que o
movimento de software livre deve focar em ganhos de longo prazo, e que as
"pessoas que não dão suporte ao software livre geralmente adotam um sistema de
valores no qual a única coisa que importa são benefícios práticos a curto
prazo". Traçando um paralelo com o feriado do Dia da Memória nos EUA, durante
o qual os heróis de guerra americanos são homenageados, Stallman apela para
que os que apoiam o software livre façam "vários sacrifícios" pela causa. Ao
contrário dos heróis de guerra, no entanto, estes sacrifícios podem ser tão
pequenos quanto "aprender uma interface de linha de comandos" ou "pagar algum
dinheiro a uma empresa que vai desenvolver um pacote de software livre, para
que você possa tê-lo daqui a alguns anos". Como alguém que já devotou os
últimos 17 anos de vida para esta causa, ele é excepcionalmente qualificado
para falar de tal compromisso.

Em seu discurso, RMS destacou muitas das qualidades salientes e muitas vezes
mal entendidas do software livre: que ele promove as quatro liberdades que
todos conhecemos a partir de nossa tradição social de compartilhar; que
"livre" (free) do software livre se refere à liberdade do usuário, não ao
custo; que software que nega quaisquer das quatro liberdade pode levar a perdas
e sofrimento; que software de código aberto e sofware livre são filosofias
fundamentalmente diferentes, mas que juntas têm levado muitas pessoas a lançar
muito software útil como software livre; que a GPL protege as liberdades dos
usuário de exploração contra interesses comerciais parasitas; e finalmente,
talvez mais importante, que as empresas e o software livre podem coexistir,
apesar das recentes afirmações de o software livre destrói a assim chamada
propriedade intelectual.

------------
Referências:
 GNU Project and Free Software Foundation:
   http://www.gnu.org
 Palestra Original (inglês):
   http://www.gnu.org/events/rms-nyu-2001-transcript.txt
 Palestra Original (português)
http://www.fsf.org/events/rms-nyu-2001-transcript.pt.txt
 Iniciativa do Código Aberto:
   http://www.opensource.org/

---------------------------------------------------------------------
Copyright (C) 2001 Matt Matthews (jvm@linuxgames.com, jvmatthe@math.duke.edu)
Distribuição e cópia literal deste artigo inteiro são permitidas em qualquer
meio desde que este aviso seja preservado.

