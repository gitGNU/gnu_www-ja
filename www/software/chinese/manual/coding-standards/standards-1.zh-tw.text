
讓自由軟體保持自由
******************

本節討論了你可以如何確定 GNU 軟體避開了法律難題，以及其它相關的議題。

參考到專利軟體
==============

在為了或從事 GNU 的期間內，不論任何情況下都不要參考到 Unix 源碼！（或是任何其它私權的程式。）

如果你對一個 Unix 程式內部有著模糊的記憶，這並不全然表示你不能寫出一支它的模仿品，但請確實遵循著不同的設計方針來組織你的模仿品，因為這樣比較有可能可以讓它與 Unix 版本的細節不相關，也不相似。

舉例來說， Unix 實用件一般都被最佳化以最小化記憶體的使用；如果你追求速度以作為替代，那麼你的程式將會非常地不一樣。你可能會保持整個輸入檔在核心中，並且在那裡掃描它而不是使用 stdio 。使用一個比 Unix 程式所採用的更近發現，且更聰明的演算法。排除暫存檔的使用。在一回之內做完它而不是兩回（我們在組譯器中才這樣做）。

或是，與此相反，強調簡單性而不是速度。對於一些應用程式而言，今天電腦的速度使得較簡單的演算法也是適當的。

或是追求一般性。舉例來說， Unix 程式通常採用靜態表或固定大小的字串，這造成了武斷的限制；因此使用動態配置以作為替代。確定你的程式可以處理在輸入檔案中的 NULs 和其它奇怪的字元。加入一個程式語言以為了提供擴充性，並且以那種語言來撰寫程式的一部份。

或是讓程式的某些部份成為獨立有用的程式庫。或是使用一個簡單的垃圾回收器，而不是精確地追蹤什麼時候要釋放記憶體，或是使用一個像是 obstacks 的新的 GNU 設施。

接受貢獻
========

如果你正在致力於的程式是由自由軟體基金會擁有版權，那麼當有人寄給你片段的代碼以加入到程式中時，我們需要法律文件才可以使用它 -- 正如同我們在一開始要求你簽署文件一般。 _每一個_ 作出並非微不足道的貢獻的個人，都必須簽署某種類型的法律文件，以使我們對於程式具有清晰的權力；單獨只有主要的作者並不足夠。

所以，在從其他人那裡加入任何貢獻之前，請告訴我們，這樣子我們可以安排取得文件。然後在你真的使用那份貢獻之前等待一下，直到我們告訴你已經收到簽署的文件之後。

這在你發行了程式之前和之後都應用著。如果你收到了修正一隻臭蟲的 diffs ，並且它們作出了重大的更動，這樣子我們會需要關於那項更動的法律文件。

這也同樣應用到註解和文件檔案。對於版權法而言，註解和代碼都只是文字。版權應用到所有類型的文字，所以我們需要針對所有類型的法律文件。

我們知道要求法律文件使人有挫折感；這也讓我們有挫折感。但是如果你不為此等待，你就處於危險的境地 -- 舉例來說，如果貢獻者的雇主不願簽署放棄聲明？你也許必須將那代碼再次地取走！

你並不需要為了在任何地方的只是幾行的更動而取得文件，它們對於版權的目的而言並不重要。同樣的，如果你從建議中所取得的全部都只是一些觀念，而不是你所使用的實際代碼，那麼你也不需要取得文件。舉例來說，如果有人寄給你一個實作品，但是你基於相同的觀念撰寫了一個不同的實作品，你並不需要取得文件。

最糟的情形是你忘了告訴我們關於其他的貢獻者。結果可能是我們某一天在法庭上會感到十分困窘。

我們對於程式的維護者有更多詳細的建議；如果你已經到了實際為 GNU 維護一支程式的階段（不管是否已經發行），請要求我們提供一份拷貝。

商標
====

請不要包括任何的商標誌謝在 GNU 軟體套件或文件中。

商標誌謝是「這個這個，是那個那個的商標。」的一些聲明。 GNU 計畫並不反對商標的基本觀念，但是這些誌謝感覺有點阿諛（叩頭），所以我們不使用它們。法律並不要求使用它們。

關於其他人的商標，法律上所要求的是：避免以「讀者會以為那是我們自己的程式或活動的命名或標籤」的方式，來使用它們。舉例來說，由於 "Objective C" 是（或至少曾是）一個商標，所以我們確定來說成是，我們提供一個「Objective C 語言的編譯器」，而不是一個「Objective C 編譯器」。後者是打算作為前者的短稱，但是它並沒有明確地說明好關係，所以它可能會被錯誤地解釋為使用「Objective C」作為標籤，而不是作為一種程式語言。

