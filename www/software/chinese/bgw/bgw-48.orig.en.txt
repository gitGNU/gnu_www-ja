Welcome to issue #48 of the Brave GNU World. Given one issue every month and 12 issues every year, this obviously means that the Brave GNU World celebrates its four year anniversary with this issue. More about this towards the end.
MagiConf

One of the points raised frequently by critics of GNU/Linux is that configuration of hardware is too complicated and not simple enough for beginners.

MagiConf [5] by Marc Boris D?rner, Ramesh Panuganty and Richard Ibbotson seeks to close this gap for the Debian GNU/Linux [6] distribution, which is the favorite of many people in the community, but not exactly known for its "end user suitability."

Thanks to a library written in C/C++, significant part of system components can be administrated easily by means of graphical user interfaces (GUI) based on GNOME/GTK or KDE/Qt<./p>

Currently supported is configuration of the network card and settings, the sound card, mouse and keyboard for the XFree86 graphical surface, as well as connected PCMCIA and USB devices.

It should be said that in terms of sound cards, only "Open Sound System" (OSS) drivers are currently supported. The more modern and soon to be standard part of the Linux kernel "Advanced Linux Sound Architecture" (ALSA) [7] is not yet supported. Also configuring the graphical desktop (XFree86) is not yet possible.

Most likely it is just a matter of time until these will be supported, however. And if things are not developing fast enough for your liking, you can certainly speed things up by (also ideal) support. Today, MagiConf is already supporting the hardware detection system Discover 2.0 [8] ¡X this will certainly allow a high degree of automation and providing useful presets to the users.

The project began more than two years ago as a pure Qt project. But after the essential functionality had been moved into a library, the authors were quick to also provide a Gtk+ front end, so both of the major desktops are supported equally now. As often projects and distributions only support one of them well, the authors have some reason to be proud of this.

As a programming language, C++ was used for both the KDE and via GTKmm also the GTK clients. Licenses used in the project are the GNU Lesser General Public License (LGPL) for the library and the GNU General Public License (GPL) for the clients. So the project is entirely Free Software.
Moon-Buggy

After introducing a ncurses based ASCII clone of the console classic "Space Invaders," here is some new food for friends of this genre.

Moon-Buggy [10] by Jochen Voss is an ASCII clone of the game being very successful under the same name on the Commodore C64 and Amstrad CPC 464 (sold in Germany under the name "Schneider CPC 464") [11].

The player is given the task to drive a Moon-Buggy across a crater-ridden moon surface without crashing it, so the concept is not very hard to grasp. But like so many simple games, this one seems highly addictive.

Proof for that is the grown and true Moon-Buggy fan community, which even went so far to write robots that could play Moon-Buggy for them. This came out when following up on a bug report [12] in which a player reported that the highscore list can only handle 5 digit scores.

That bug report did cause some surprise because noone expected that anyone might be able to get that far. Since it takes the robot two days of continuous play to reach it, that seems quite understandable.

The game was written around Christmas 1998, when Jochen Voss had some time to waste. Since then there have been several improvements and a Debian package by Christian T. Steigies; the project itself is now essentially stable.

It was written in C with ncurses and runs on pretty much all somewhat POSIX compliant Unix systems on the shell and console as well as over ssh connections.

Provided he finds time time for it, Jochen plans to make some final improvements and maybe even add the Ufo, which is present in the original, but missing in his program. Then it should finally be ready for the version 1.0 release.

If you enjoy these little games, Moon-Buggy, which is published as Free Software under the GNU General Public License (GPL), is your friend.
cdcover

Nowadays, CD writers are spread widely and certainly found in a large part of homes, so many people will probably know the problems associated with trying to avoid losing track of all the CDs.

The program cdcover [13] by Roland sch?uble allows creation of covers and inlets for CD jewelcases in an interactive, comfortable and easy way. Provided fields are: title, subtitle, text on front- and backside, footnote and date.

Based upon templates, the program generates postscript files from that data, which can either be printed directly or viewed in ghostview.

The project is written in Python; a logical consequence of Rolands motivation to learn Python by starting this project. He was especially careful to preserve the platform independence of Python and make cdcover usable on GNU/Linux (Unix) systems and Win32 alike.

His personal experience with this was that even using Python it is not very easy to retain platform independence, for instance he has failed to get the Python-CDDB module to run on Win32 so far.

So the binding to the CDDB data base is currently only available on GNU/Linux and other Unices, allowing on these platforms to import the artist, title and index of audio CDs from the internet.

This project, which is released as Free Software under the GNU General Public License (GPL), is a family project in some way, as the web page [13] was created by Rolands son, Michele Sch?uble.

Roland sees possible room for improvement of the project especially in the configuration, which is still done by means of a ".cdcover" text file.

Working on this as well as adding support for saving data in a more portable format, for instance XML, is part of Rolands plans for the future.

Help would be quite welcome, especially in terms of more users and feeback, as well as more templates.
GeniusTrader

There are many niches that have not yet been freed by Free Software and sometimes projects set out to change that. GeniusTrader [14] by Fabien Fulhaber is such a project, released under the GNU General Public License (GPL) as Free Software.

Supported by volunteers like Oliver Bossert, Fabien has begun creating a toolset for creating and testing automatic trade systems. According to himself, his project will benefit "people who wish to get rich on the stock exchange by following signals generated by a computer."

Even if the stock fever has cooled down somewhat as a result of the current depression, the project remains fascinating. Comparable software currently only exists as very expensive proprietary solutions, which are not really accessible to normal people.

GeniusTrader offers interested people to simulate and evaluate trade strategies. So even without the risk of real financial losses a lot about the stock exchange can be learned.

The project began in 1998, but has been declared dead twice in the course of its existance, every time because the approach was too broad and no end in sight. Fabien made the third approach in 2002 and focused himself on the trade system, around which everything was assembled.

He currently sees the largest weakness of the project in its exclusive usage of the commandline, its not providing any graphical user interface.

Also the project is written in Perl, which requires serious users to also be proficient in this language; for instance to modify the module for access to the data base.

Recently some structural changes have been made, so the current focus is on adapting the remaining modules. Afterwards Fabien hopes to be able to implement a web frontend.

For this he is still seeking help in form of user feedback and development contributions by others. In his search for help he even went as far as buying an ad on LWN, which said: "Want to make money with free software? Learn Perl and try GeniusTrader".

Unfortunately, the reactions were not as numerous as he would have liked them to be, so he now hopes that this issue of the Brave GNU World will be able to raise some more interest.

Therefore I'd like to ask all readers to maybe also pass this article on also to others, who might normally not read the column, but have interest in the stock exchange and its workings.
Fiduciary Licence Agreement (FLA)

Securing the legal aspects of Free Software has become increasingly central recently and its significance increases with more and more people coming to realize the benefits of Free Software.

Most visible are certainly the spectacular cases, like Jon Johansen, who was dragged to court in Norwegen on order of the US media lobby, a case that quickly began revolving around the central question of whether buying a DVD in a store entitles someone to also view it. [15]

But also cases like the struggle between MySQl and NuSphere or trademark issues made news. Be it Adobe forcing kIllustrator to change their name, or the publisher of the well-known Asterix and Obelix comics, "Les Éditions Albert Ren?." In the latter case, Werner Heuser, who runs an information portal for mobile Unix systems, was threatened with 50.000 EUR or six months in jail. [16]

One of the reasons these cases are increasing is because Free Software becomes more visible on the one hand, but seems to be defenseless against such attacks on the other. In fact Werner Heuser, who is still fighting against the overmighty publisher, is the exception.

The everyday legal needs of Free Software are usually much less spectacular, but not less important, as a legally secured fundament is a necessary prerequisite for commercial use, for instance.

If we want prevent seeing Free Software pushed into the hobbyist corner, easily condemning it to insignificance, we must think about how to preserve the legal security of Free Software.

In this, Free Software has different needs than proprietary software, which is normally written by a single company, sold for a while and then discontinued.

Opposed to this, Free Software often has many contributors and is used for a period that can be seen as "eternal" in the IT sector. Several of the standard components in use on all GNU/Linux systems today, are 10-20 years old or even older in some cases.

During their useful life, they are in permanent evolution, but not only the technical aspects change, the legal basis, on which also the legal aspects of Free Software are based, is in permanent devlopment, as has been explained in issue #38 [17] of the Brave GNU World under the term "Legal Maintainability."

As briefly announced already in the aforementioned issue, the FSF Europe has been working on the "Fiduciary Licence Agreement" (FLA) to address these questions, which has been released on February 4th 2003. [18]

This agreement allows authors of Free Software to declare the FSF Europe the legal fiduciary for their projects.

This not only secures projects against the disappearance of authors, the FSF Europe also takes a significant part of the legal risks. This allows Free Software to stand eye in eye with companies, for instance.

For how many projects this can be done naturally depends on the support and resources, which the FSF Europe will be able to spend on this task.

In any case the agreement will create the possibility to further the legal security of Free Software significantly.
Free Software Laptops

In the first days of 2003, when I was busy preparing the first Free Software tours of the year, one week before I had to leave my old laptop died emitting well-known, unpleasant fumes.

As two weeks on the road without a laptop would have meant not being able to work for two weeks, we tried (unfortunately without success) to find a company that might quickly provide a laptop. So on Friday before the Monday I had to leave, I made my way to a large electronics discounter.

They had a special offer for a Sony VAIO, which had a very nice large screen and space for an optional second battery. As working time without power is a prime criterion for me, I discussed using GNU/Linux on that machine with one of the salespeople, which he had nothing really to say about. So I decided to risk it and bought the laptop.

At home I immediately set to installation, but I couldn't get APM or ACPI to run no matter what I tried. As neither the handbook nor the web site contained any useful technical information about the laptop, I tried until around 3am until I realized that the BIOS of that particular laptop was crippled in terms of power management, it did have no functionality for that whatsoever.

All the power management was apparently done by the (preinstalled) Windows and of course there was no GNU/Linux support. The laptop was essentially useless.

Next day I brought it back and had them give me back my money, which I took to another computer store, where I ¡X after some testing and consideration ¡X got myself an Asus laptop that obviously had a fully ACPI capably BIOS.

With a little persuasion, I got that laptop to give me some of the functionality that define the usefulness of a laptop. Thanks to a wasted weekend even in time to be able to get on board my plane with a fully installed laptop.

Only suspend-to-disk, also called hibernation, I have never been able to get to work. The AWARD BIOS shipped by Phoenix clearly has these capabilites, but it is not documented how to let the BIOS know where to write the memory contents on the hard disk.

So a somewhat bad feeling remains; especially since I dare doubt that all people will or would be willing to spend as much time on installing their laptop as I (forcedly) did.

Would cars be sold with special adapters that only allow getting gas at the gas stations of one specific oil company, this would hardly be accepted. For laptops this is apparently industry standard.

A situation such as this is inacceptable. It must not be the task of a hardware vendor to force their customers to use only a specific piece of software.

Hardware vendors don't have to actively support all operating systems, normally it would be entirely sufficient if alternatives weren't blocked intentionally. Currently we have a situation in which all operating systems but one are deliberately barred from running fully by hiding essential information about the laptop.

Thanks to the high degree of integration with laptops, the BIOS is strongly entwined with the hardware. Not to provide information about how to reach power management functionality is comparable to anonymize the graphics adapter and hiding information about vendor, model and specifications.

I would very much like to be able to commend to my readers a vendor of laptops that does not make headlines by aggressive lobbying for software patents and offers laptops that truly give their users freedom and mobility.

Therefore I ask all vendors offering laptops: Give us a laptop with the necessary specifications and information to be able to use it entirely! Support the projects for ACPI implementation and integration with information and allow employees to work with them!

Should some vendor be willing to cater to the needs of the constantly growing Free Software community and make their laptops entirely usable, I gladly offer to make this known here and elswhere, so people can make a good and informed purchase decision.

One good way to reach me is by email. [1]
Four years Brave GNU World

So now the Brave GNU World exists for four years ¡X one more month if you count the issue that I wasn't able to write. I'd like to use the occasion to thank all those who have remained true to the colum as volunteers for translations, proofreaders, web pages, project recommendations or as readers.

The steady interest during the years was a main factor for me to keep taking the time for the column every month even when chaos had broken out or important deadlines were closing in.

After all the time, there are still contributions for the "We run GNU" initiative [4] started in issue #6 [1]. And there are still new volunteers who wish to make translations, so recently a translation into Chinese has been added and soon we may also have a translation into Catalan. This would bring the number of language the column is available in up to 10.

I'd like to emphasize that all these helping hands are volunteers who work in their spare time to make the Brave GNU World accessible to more people. So if you discover that a translation into some language is missing, it would clearly be in the spirit of Free Software and the column to simply get active and get it done.

Everyone who has contributed over the years in one way or another: you have my personal and very special thanks!

It seems I should at some point start thinking about what to do next year, because when the column was started, I considered the danger of a 5 year anniversary to be quite low, actually.
Enough

Enough Brave GNU World for this month, as usual I'd like to encourage comments, ideas, questions and suggestions by mail, [1] please keep your eyes open for projects that could be made available to more people through the column.
